{"/home/travis/build/npmtest/node-npmtest-homebridge-legacy-plugins/test.js":"/* istanbul instrument in package npmtest_homebridge_legacy_plugins */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-legacy-plugins/lib.npmtest_homebridge_legacy_plugins.js":"/* istanbul instrument in package npmtest_homebridge_legacy_plugins */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_homebridge_legacy_plugins = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_homebridge_legacy_plugins = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-legacy-plugins/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-homebridge-legacy-plugins && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_homebridge_legacy_plugins */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_homebridge_legacy_plugins\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_homebridge_legacy_plugins.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_homebridge_legacy_plugins.rollup.js'] =\n            local.assetsDict['/assets.npmtest_homebridge_legacy_plugins.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_homebridge_legacy_plugins.__dirname + '/lib.npmtest_homebridge_legacy_plugins.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-legacy-plugins/node_modules/homebridge-legacy-plugins/index.js":"var path = require('path');\nvar api = require('./api')\nvar fs = require('fs');\n\nmodule.exports = function(homebridge) {\n\n  // make the homebridge API object available to accessories and platforms that weren't\n  // designed with it in mind\n  api.homebridge = homebridge;\n\n  // load up all legacy accessories\n  var accessoriesDir = path.join(__dirname, \"accessories\");\n\n  fs.readdirSync(accessoriesDir).forEach(function(file) {\n    if (file.indexOf(\".js\") > 0) {\n      var name = file.replace(\".js\",\"\");\n      homebridge.registerAccessory(\"homebridge-legacy-plugins\", name, function(logger, config) {\n        console.log(\"Loading legacy accessory \" + name);\n        \n        var accessoryModule = require(path.join(accessoriesDir, file));\n        return new accessoryModule.accessory(logger, config);\n      });\n    }\n  });\n  \n  // load up all legacy platforms\n  var platformsDir = path.join(__dirname, \"platforms\");\n\n  fs.readdirSync(platformsDir).forEach(function(file) {\n    if (file.indexOf(\".js\") > 0) {\n      var name = file.replace(\".js\",\"\");\n      homebridge.registerPlatform(\"homebridge-legacy-plugins\", name, function(logger, config) {\n        console.log(\"Loading legacy platform \" + name);\n        \n        var platformModule = require(path.join(platformsDir, file));\n        return new platformModule.platform(logger, config);\n      });\n    }\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-homebridge-legacy-plugins/node_modules/homebridge-legacy-plugins/api.js":"\nmodule.exports = {\n  homebridge: null // filled in by index.js, accessed later by accessories+platforms\n}","/home/travis/build/npmtest/node-npmtest-homebridge-legacy-plugins/node_modules/homebridge-legacy-plugins/accessories/AD2USB.js":"var types = require(\"../api\").homebridge.hapLegacyTypes;\nvar AD2USB = require('ad2usb');\nvar CUSTOM_PANEL_LCD_TEXT_CTYPE = \"A3E7B8F9-216E-42C1-A21C-97D4E3BE52C8\";\n\nfunction AD2USBAccessory(log, config) {\n\n  this.log = log;\n  this.name = config[\"name\"];\n  this.host = config[\"host\"];\n  this.port = config[\"port\"];\n  this.pin = config[\"pin\"];\n  var that = this;\n  this.currentArmState = 2;\n  this.currentStateCharacteristic = undefined;\n  this.targetStateCharacteristic = undefined;\n  this.lcdCharacteristic = undefined;\n\n  var alarm = AD2USB.connect(this.host, this.port, function() {\n\n    // Send an initial empty character to get status\n    alarm.send('');\n\n    // Armed Away\n    alarm.on('armedAway', function() {\n\n        that.log(\"Armed to AWAY\");\n        if (that.currentStateCharacteristic) {\n            that.currentStateCharacteristic.updateValue(0, null);\n        }\n        if (that.targetStateCharacteristic) {\n            that.targetStateCharacteristic.updateValue(1, null);\n        }\n\n    });\n\n    // Armed Stay\n    alarm.on('armedStay', function() {\n\n        that.log(\"Armed to STAY\");\n        if (that.currentStateCharacteristic) {\n            that.currentStateCharacteristic.updateValue(0, null);\n        }\n        if (that.targetStateCharacteristic) {\n            that.targetStateCharacteristic.updateValue(0, null);\n        }\n\n    });\n\n    // Armed Night\n    alarm.on('armedNight', function() {\n\n        that.log(\"Armed to NIGHT\");\n        if (that.currentStateCharacteristic) {\n            that.currentStateCharacteristic.updateValue(0, null);\n        }\n        if (that.targetStateCharacteristic) {\n            that.targetStateCharacteristic.updateValue(2, null);\n        }\n\n    });\n\n    // Disarmed\n    alarm.on('disarmed', function() {\n\n        that.log(\"Disarmed\");\n        if (that.currentStateCharacteristic) {\n            that.currentStateCharacteristic.updateValue(1, null);\n        }\n        if (that.targetStateCharacteristic) {\n            that.targetStateCharacteristic.updateValue(3, null);\n        }\n\n    });\n\n    // Text Change\n    alarm.on('lcdtext', function(newText) {\n\n        that.log(\"LCD: \" + newText);\n        if (that.lcdCharacteristic) {\n            that.lcdCharacteristic.updateValue(newText, null);\n        }\n\n    });\n\n    \n  });\n  this.alarm = alarm;\n\n}\n\nAD2USBAccessory.prototype = {\n\n  setArmState: function(targetArmState) {\n\n    var that = this;\n    that.log(\"Desired target arm state: \" + targetArmState);\n\n    // TARGET\n    // 0 - Stay\n    // 1 - Away\n    // 2 - Night\n    // 3 - Disarm\n    if (targetArmState == 0) {\n        that.alarm.armStay(that.pin);\n    }\n    else if (targetArmState == 1) {\n        that.alarm.armAway(that.pin);\n    }\n    else if (targetArmState == 2) {\n        that.alarm.armNight(that.pin);\n    }\n    else if (targetArmState == 3) {\n        that.alarm.disarm(that.pin);\n    }\n\n\n    // CURRENT\n    // 0 - Armed\n    // 1 - Disarmed\n    // 2 - Hold\n\n  },\n\n  getServices: function() {\n    var that = this;\n    return [{\n      sType: types.ACCESSORY_INFORMATION_STYPE,\n      characteristics: [{\n        cType: types.NAME_CTYPE,\n        onUpdate: null,\n        perms: [\"pr\"],\n        format: \"string\",\n        initialValue: this.name,\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Name of the accessory\",\n        designedMaxLength: 255\n      },{\n        cType: types.MANUFACTURER_CTYPE,\n        onUpdate: null,\n        perms: [\"pr\"],\n        format: \"string\",\n        initialValue: \"Nutech\",\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Manufacturer\",\n        designedMaxLength: 255\n      },{\n        cType: types.MODEL_CTYPE,\n        onUpdate: null,\n        perms: [\"pr\"],\n        format: \"string\",\n        initialValue: \"AD2USB\",\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Model\",\n        designedMaxLength: 255\n      },{\n        cType: types.SERIAL_NUMBER_CTYPE,\n        onUpdate: null,\n        perms: [\"pr\"],\n        format: \"string\",\n        initialValue: \"AD2USBIF\",\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"SN\",\n        designedMaxLength: 255\n      },{\n        cType: types.IDENTIFY_CTYPE,\n        onUpdate: null,\n        perms: [\"pw\"],\n        format: \"bool\",\n        initialValue: false,\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Identify Accessory\",\n        designedMaxLength: 1\n      }]\n    },{\n      sType: types.ALARM_STYPE,\n      characteristics: [{\n        cType: types.NAME_CTYPE,\n        onUpdate: null,\n        perms: [\"pr\"],\n        format: \"string\",\n        initialValue: this.name,\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Name of service\",\n        designedMaxLength: 255\n      },{\n        cType: types.ALARM_CURRENT_STATE_CTYPE,\n        onUpdate: null,\n        onRegister: function(characteristic) { \n\n            that.currentStateCharacteristic = characteristic;\n            characteristic.eventEnabled = true;\n\n             },\n        perms: [\"pr\",\"ev\"],\n        format: \"int\",\n        initialValue: 2,\n        supportEvents: true,\n        supportBonjour: false,\n        manfDescription: \"Alarm current arm state\",\n        designedMaxLength: 1\n      },{\n        cType: types.ALARM_TARGET_STATE_CTYPE,\n        onUpdate: function(value) { that.setArmState(value); },\n        onRegister: function(characteristic) { \n\n            that.targetStateCharacteristic = characteristic;\n            characteristic.eventEnabled = true;\n\n             },\n        perms: [\"pw\",\"pr\",\"ev\"],\n        format: \"int\",\n        initialValue: 1,\n        supportEvents: true,\n        supportBonjour: false,\n        manfDescription: \"Alarm target arm state\",\n        designedMaxLength: 1\n      },\n      {\n        cType: CUSTOM_PANEL_LCD_TEXT_CTYPE,\n        onUpdate: null,\n        onRegister: function(characteristic) { \n\n            that.lcdCharacteristic = characteristic;\n            characteristic.eventEnabled = true;\n\n             },\n        perms: [\"pr\",\"ev\"],\n        format: \"string\",\n        initialValue: \"Unknown\",\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Keypad Text\",\n        designedMaxLength: 64\n      }]\n    }];\n  }\n};\n\nmodule.exports.accessory = AD2USBAccessory;\n","/home/travis/build/npmtest/node-npmtest-homebridge-legacy-plugins/node_modules/homebridge-legacy-plugins/accessories/Carwings.js":"var types = require(\"../api\").homebridge.hapLegacyTypes;\nvar carwings = require(\"carwingsjs\");\n\nfunction CarwingsAccessory(log, config) {\n  this.log = log;\n  this.name = config[\"name\"];\n  this.username = config[\"username\"];\n  this.password = config[\"password\"];\n}\n\nCarwingsAccessory.prototype = {\n\n  setPowerState: function(powerOn) {\n    var that = this;\n\n    carwings.login(this.username, this.password, function(err, result) {\n      if (!err) {\n        that.vin = result.vin;\n        that.log(\"Got VIN: \" + that.vin);\n\n        if (powerOn) {\n          carwings.startClimateControl(that.vin, null, function(err, result) {\n            if (!err)\n              that.log(\"Started climate control.\");\n            else\n              that.log(\"Error starting climate control: \" + err);\n          });\n        }\n        else {\n          carwings.stopClimateControl(that.vin, function(err, result) {\n            if (!err)\n              that.log(\"Stopped climate control.\");\n            else\n              that.log(\"Error stopping climate control: \" + err);\n          });\n        }\n      }\n      else {\n        that.log(\"Error logging in: \" + err);\n      }\n    });\n  },\n\n  getServices: function() {\n    var that = this;\n    return [{\n      sType: types.ACCESSORY_INFORMATION_STYPE,\n      characteristics: [{\n        cType: types.NAME_CTYPE,\n        onUpdate: null,\n        perms: [\"pr\"],\n        format: \"string\",\n        initialValue: this.name,\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Name of the accessory\",\n        designedMaxLength: 255\n      },{\n        cType: types.MANUFACTURER_CTYPE,\n        onUpdate: null,\n        perms: [\"pr\"],\n        format: \"string\",\n        initialValue: \"Nissan\",\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Manufacturer\",\n        designedMaxLength: 255\n      },{\n        cType: types.MODEL_CTYPE,\n        onUpdate: null,\n        perms: [\"pr\"],\n        format: \"string\",\n        initialValue: \"Rev-1\",\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Model\",\n        designedMaxLength: 255\n      },{\n        cType: types.SERIAL_NUMBER_CTYPE,\n        onUpdate: null,\n        perms: [\"pr\"],\n        format: \"string\",\n        initialValue: \"A1S2NASF88EW\",\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"SN\",\n        designedMaxLength: 255\n      },{\n        cType: types.IDENTIFY_CTYPE,\n        onUpdate: null,\n        perms: [\"pw\"],\n        format: \"bool\",\n        initialValue: false,\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Identify Accessory\",\n        designedMaxLength: 1\n      }]\n    },{\n      sType: types.SWITCH_STYPE,\n      characteristics: [{\n        cType: types.NAME_CTYPE,\n        onUpdate: null,\n        perms: [\"pr\"],\n        format: \"string\",\n        initialValue: this.name,\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Name of service\",\n        designedMaxLength: 255\n      },{\n        cType: types.POWER_STATE_CTYPE,\n        onUpdate: function(value) { that.setPowerState(value); },\n        perms: [\"pw\",\"pr\",\"ev\"],\n        format: \"bool\",\n        initialValue: false,\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Change the power state of the car\",\n        designedMaxLength: 1\n      }]\n    }];\n  }\n};\n\nmodule.exports.accessory = CarwingsAccessory;\n","/home/travis/build/npmtest/node-npmtest-homebridge-legacy-plugins/node_modules/homebridge-legacy-plugins/accessories/ELKM1.js":"var types = require(\"../api\").homebridge.hapLegacyTypes;\nvar elkington = require(\"elkington\");\n\nfunction ElkM1Accessory(log, config) {\n  this.log = log;\n  this.name = config[\"name\"];\n  this.zone = config[\"zone\"];\n  this.host = config[\"host\"];\n  this.port = config[\"port\"];\n  this.pin = config[\"pin\"];\n  this.arm = config[\"arm\"];\n}\n\nElkM1Accessory.prototype = {\n  setPowerState: function(alarmOn) {\n    var that = this;\n\n    if (!alarmOn)\n    {\n        return;\n    }\n\n    var elk = elkington.createConnection({\n        port: that.port,\n        host: that.host,\n    });\n\n    switch (that.arm)\n    {\n        case 'Away':\n            elk.armAway({area: that.zone, code: that.pin});\n            break;\n        case 'Stay':\n            elk.armStay({area: that.zone, code: that.pin});\n            break;\n        case 'Night':\n            elk.armNightInstant({area: that.zone, code: that.pin});\n            break;\n        default:\n            break;\n    }\n  },\n\n  getServices: function() {\n    var that = this;\n    return [{\n      sType: types.ACCESSORY_INFORMATION_STYPE,\n      characteristics: [{\n        cType: types.NAME_CTYPE,\n        onUpdate: null,\n        perms: [\"pr\"],\n        format: \"string\",\n        initialValue: this.name,\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Name of the accessory\",\n        designedMaxLength: 255\n      },{\n        cType: types.MANUFACTURER_CTYPE,\n        onUpdate: null,\n        perms: [\"pr\"],\n        format: \"string\",\n        initialValue: \"Elk\",\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Manufacturer\",\n        designedMaxLength: 255\n      },{\n        cType: types.MODEL_CTYPE,\n        onUpdate: null,\n        perms: [\"pr\"],\n        format: \"string\",\n        initialValue: \"M1\",\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Model\",\n        designedMaxLength: 255\n      },{\n        cType: types.SERIAL_NUMBER_CTYPE,\n        onUpdate: null,\n        perms: [\"pr\"],\n        format: \"string\",\n        initialValue: \"A1S2NASF88EW\",\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"SN\",\n        designedMaxLength: 255\n      },{\n        cType: types.IDENTIFY_CTYPE,\n        onUpdate: null,\n        perms: [\"pw\"],\n        format: \"bool\",\n        initialValue: false,\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Identify Accessory\",\n        designedMaxLength: 1\n      }]\n    },{\n      sType: types.SWITCH_STYPE,\n      characteristics: [{\n        cType: types.NAME_CTYPE,\n        onUpdate: null,\n        perms: [\"pr\"],\n        format: \"string\",\n        initialValue: this.name,\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Name of service\",\n        designedMaxLength: 255\n      },{\n        cType: types.POWER_STATE_CTYPE,\n        onUpdate: function(value) { that.setPowerState(value); },\n        perms: [\"pw\",\"pr\",\"ev\"],\n        format: \"bool\",\n        initialValue: false,\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Alarm the Zone\",\n        designedMaxLength: 1\n      }]\n    }];\n  }\n};\n\nmodule.exports.accessory = ElkM1Accessory;\n","/home/travis/build/npmtest/node-npmtest-homebridge-legacy-plugins/node_modules/homebridge-legacy-plugins/accessories/FileSensor.js":"var Service = require(\"../api\").homebridge.hap.Service;\nvar Characteristic = require(\"../api\").homebridge.hap.Characteristic;\nvar chokidar = require(\"chokidar\");\nvar debug = require(\"debug\")(\"FileSensorAccessory\");\nvar crypto = require(\"crypto\");\n\nmodule.exports = {\n  accessory: FileSensorAccessory\n}\n\nfunction FileSensorAccessory(log, config) {\n  this.log = log;\n\n  // url info\n  this.name = config[\"name\"];\n  this.path = config[\"path\"];\n  this.window_seconds = config[\"window_seconds\"] || 5;\n  this.sensor_type = config[\"sensor_type\"] || \"m\";\n  this.inverse = config[\"inverse\"] || false;\n  \n  if(config[\"sn\"]){\n      this.sn = config[\"sn\"];\n  } else {\n      var shasum = crypto.createHash('sha1');\n      shasum.update(this.path);\n      this.sn = shasum.digest('base64');\n      debug('Computed SN ' + this.sn);\n  }\n}\n\nFileSensorAccessory.prototype = {\n\n  getServices: function() {\n\n    // you can OPTIONALLY create an information service if you wish to override\n    // the default values for things like serial number, model, etc.\n    var informationService = new Service.AccessoryInformation();\n    \n    informationService\n      .setCharacteristic(Characteristic.Name, this.name)\n      .setCharacteristic(Characteristic.Manufacturer, \"Homebridge\")\n      .setCharacteristic(Characteristic.Model, \"File Sensor\")\n      .setCharacteristic(Characteristic.SerialNumber, this.sn);\n    \n    var service, changeAction;\n    if(this.sensor_type === \"c\"){\n        service = new Service.ContactSensor();\n        changeAction = function(newState){\n            service.getCharacteristic(Characteristic.ContactSensorState)\n                    .setValue(newState ? Characteristic.ContactSensorState.CONTACT_DETECTED : Characteristic.ContactSensorState.CONTACT_NOT_DETECTED);\n        };\n    } else {\n        service = new Service.MotionSensor();\n        changeAction = function(newState){\n            service.getCharacteristic(Characteristic.MotionDetected)\n                    .setValue(newState);\n        };\n    }\n    \n    var changeHandler = function(path, stats){\n        var d = new Date();\n        if(d.getTime() - stats.mtime.getTime() <= (this.window_seconds * 1000)){\n            var newState = this.inverse ? false : true;\n            changeAction(newState);\n            if(this.timer !== undefined) clearTimeout(this.timer);\n            this.timer = setTimeout(function(){changeAction(!newState);}, this.window_seconds * 1000);\n        }\n    }.bind(this);\n    \n    var watcher = chokidar.watch(this.path, {alwaysStat: true});\n    watcher.on('add', changeHandler);\n    watcher.on('change', changeHandler);\n    \n    return [informationService, service];\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-homebridge-legacy-plugins/node_modules/homebridge-legacy-plugins/accessories/GenericRS232Device.js":"var Service = require(\"../api\").homebridge.hap.Service;\nvar Characteristic = require(\"../api\").homebridge.hap.Characteristic;\nvar SerialPort = require(\"serialport\").SerialPort;\n\nmodule.exports = {\n  accessory: GenericRS232DeviceAccessory\n}\n\nfunction GenericRS232DeviceAccessory(log, config) {\n  this.log          = log;\n  this.id           = config[\"id\"];\n  this.name         = config[\"name\"];\n  this.model_name   = config[\"model_name\"];\n  this.manufacturer = config[\"manufacturer\"];\n  this.on_command   = config[\"on_command\"];\n  this.off_command  = config[\"off_command\"];\n  this.device       = config[\"device\"];\n  this.baudrate     = config[\"baudrate\"];\n}\n\nGenericRS232DeviceAccessory.prototype = {\n  setPowerState: function(powerOn, callback) {\n    var that        = this;\n    var command     = powerOn ? that.on_command : that.off_command;\n    var serialPort  = new SerialPort(that.device, { baudrate: that.baudrate }, false);\n    serialPort.open(function (error) {\n      if (error) {\n        callback(new Error('Can not communicate with ' + that.name + \" (\" + error + \")\"))\n      } else {\n        serialPort.write(command, function(err, results) {\n          if (error) {\n            callback(new Error('Can not send power command to ' + that.name + \" (\" + err + \")\"))\n          } else {\n            callback()\n          }\n        });\n      }\n    });\n  },\n  \n  getServices: function() {\n    var switchService = new Service.Switch(this.name);\n    var informationService = new Service.AccessoryInformation();\n\n    informationService\n      .setCharacteristic(Characteristic.Manufacturer, this.manufacturer)\n      .setCharacteristic(Characteristic.Model, this.model_name)\n      .setCharacteristic(Characteristic.SerialNumber, this.id);\n\n    switchService\n      .getCharacteristic(Characteristic.On)\n      .on('set', this.setPowerState.bind(this));\n\n    return [informationService, switchService];\n  }\n}\n\nmodule.exports.accessory = GenericRS232DeviceAccessory;","/home/travis/build/npmtest/node-npmtest-homebridge-legacy-plugins/node_modules/homebridge-legacy-plugins/accessories/HomeMatic.js":"var types = require(\"../api\").homebridge.hapLegacyTypes;\nvar request = require(\"request\");\n\nfunction HomeMatic(log, config) {\n  this.log = log;\n  this.name = config[\"name\"];\n  this.ccuID = config[\"ccu_id\"];\n  this.ccuIP = config[\"ccu_ip\"];\n}\n\nHomeMatic.prototype = {\n\n  setPowerState: function(powerOn) {\n\n    var binaryState = powerOn ? 1 : 0;\n    var that = this;\n    \n    this.log(\"Setting power state of CCU to \" + powerOn);\n    this.log(this.ccuID+ powerOn);\n    \n    \trequest.put({\n      url: \"http://\"+this.ccuIP+\"/config/xmlapi/statechange.cgi?ise_id=\"+this.ccuID+\"&new_value=\"+ powerOn,\n    }, function(err, response, body) {\n\n      if (!err && response.statusCode == 200) {\n        that.log(\"State change complete.\");\n      }\n      else {\n        that.log(\"Error '\"+err+\"' setting lock state: \" + body);\n      }\n    });\n  },\n  getPowerState: function(callback) {\n    var that = this;\n    \n    this.log(\"Getting Power State of CCU\");    \n    request.get({\n      url: \"http://\"+this.ccuIP+\"/config/xmlapi/state.cgi?datapoint_id=\"+this.ccuID,\n    }, function(err, response, body) {\n\n      if (!err && response.statusCode == 200) {\n        \n        //that.log(\"Response:\"+response.body);\n        var responseString = response.body.substring(83,87);\n        //that.log(responseString);\n\t\tswitch(responseString){\n\t\t  case \"true\": {modvalue = \"1\";break;}\n\t\t  case \"fals\": {modvalue = \"0\";break;} \n\t    }\n        callback(parseInt(modvalue));\n        that.log(\"Getting Power State complete.\");\n      }\n      else {\n        that.log(\"Error '\"+err+\"' getting Power State: \" + body);\n      }\n    });\n  },\n  getServices: function() {\n    var that = this;\n    return [{\n      sType: types.ACCESSORY_INFORMATION_STYPE,\n      characteristics: [{\n        cType: types.NAME_CTYPE,\n        onUpdate: null,\n        perms: [\"pr\"],\n        format: \"string\",\n        initialValue: this.name,\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Name of the accessory\",\n        designedMaxLength: 255\n      },{\n        cType: types.MANUFACTURER_CTYPE,\n        onUpdate: null,\n        perms: [\"pr\"],\n        format: \"string\",\n        initialValue: \"WeMo\",\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Manufacturer\",\n        designedMaxLength: 255\n      },{\n        cType: types.MODEL_CTYPE,\n        onUpdate: null,\n        perms: [\"pr\"],\n        format: \"string\",\n        initialValue: \"Rev-1\",\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Model\",\n        designedMaxLength: 255\n      },{\n        cType: types.SERIAL_NUMBER_CTYPE,\n        onUpdate: null,\n        perms: [\"pr\"],\n        format: \"string\",\n        initialValue: \"A1S2NASF88EW\",\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"SN\",\n        designedMaxLength: 255\n      },{\n        cType: types.IDENTIFY_CTYPE,\n        onUpdate: null,\n        perms: [\"pw\"],\n        format: \"bool\",\n        initialValue: false,\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Identify Accessory\",\n        designedMaxLength: 1\n      }]\n    },{\n      sType: types.SWITCH_STYPE,\n      characteristics: [{\n        cType: types.NAME_CTYPE,\n        onUpdate: null,\n        perms: [\"pr\"],\n        format: \"string\",\n        initialValue: this.name,\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Name of service\",\n        designedMaxLength: 255\n      },{\n        cType: types.POWER_STATE_CTYPE,\n        onUpdate: function(value) { that.setPowerState(value); },\n        onRead: function(callback) { that.getPowerState(callback); },\n        perms: [\"pw\",\"pr\",\"ev\"],\n        format: \"bool\",\n        initialValue: false,\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Change the power state of a Variable\",\n        designedMaxLength: 1\n      }]\n    }];\n  }\n};\n\nmodule.exports.accessory = HomeMatic;\n","/home/travis/build/npmtest/node-npmtest-homebridge-legacy-plugins/node_modules/homebridge-legacy-plugins/accessories/HomeMaticThermo.js":"var types = require(\"../api\").homebridge.hapLegacyTypes;\nvar request = require(\"request\");\n\nfunction HomeMaticThermo(log, config) {\n  this.log = log;\n  this.name = config[\"name\"];\n  this.ccuIDTargetTemp = config[\"ccu_id_TargetTemp\"];\n  this.ccuIDCurrentTemp = config[\"ccu_id_CurrentTemp\"];\n  this.ccuIDControlMode = config[\"ccu_id_ControlMode\"];\n  this.ccuIDManuMode = config[\"ccu_id_ManuMode\"];\n  this.ccuIDAutoMode = config[\"ccu_id_AutoMode\"];  \n  this.ccuIP = config[\"ccu_ip\"];\n}\n\nHomeMaticThermo.prototype = {\n\n  setTargetTemperature: function(value) {\n\n    var that = this;\n    \n    this.log(\"Setting target Temperature of CCU to \" + value);\n    this.log(this.ccuIDTargetTemp + \" \" + value);\n    \n    request.put({\n      url: \"http://\"+this.ccuIP+\"/config/xmlapi/statechange.cgi?ise_id=\"+this.ccuIDTargetTemp+\"&new_value=\"+ value,\n    }, function(err, response, body) {\n\n      if (!err && response.statusCode == 200) {\n        that.log(\"State change complete.\");\n      }\n      else {\n        that.log(\"Error '\"+err+\"' setting Temperature: \" + body);\n      }\n    });\n  },\n  getCurrentTemperature: function(callback) {\n\n    var that = this;\n    \n    this.log(\"Getting current Temperature of CCU\");    \n    request.get({\n      url: \"http://\"+this.ccuIP+\"/config/xmlapi/state.cgi?datapoint_id=\"+this.ccuIDCurrentTemp,\n    }, function(err, response, body) {\n\n      if (!err && response.statusCode == 200) {\n        \n        //that.log(\"Response:\"+response.body);\n        var responseString = response.body.substring(83,87);\n        //that.log(responseString);\n        callback(parseFloat(responseString));\n        //that.log(\"Getting current temperature complete.\");\n      }\n      else {\n        that.log(\"Error '\"+err+\"' getting Temperature: \" + body);\n      }\n    });\n  },   \n  getTargetTemperature: function(callback) {\n\n    var that = this;\n    \nthis.log(\"Getting target Temperature of CCU\");    \n    request.get({\n      url: \"http://\"+this.ccuIP+\"/config/xmlapi/state.cgi?datapoint_id=\"+this.ccuIDTargetTemp,\n    }, function(err, response, body) {\n\n      if (!err && response.statusCode == 200) {\n        \n        //that.log(\"Response:\"+response.body);\n        var responseString = response.body.substring(83,87);\n        //that.log(responseString);\n        callback(parseFloat(responseString));\n        //that.log(\"Getting target temperature complete.\");\n      }\n      else {\n        that.log(\"Error '\"+err+\"' getting Temperature: \" + body);\n      }\n    });\n  },\n  getMode: function(callback) {\n\n    var that = this;\n    \n    //this.log(\"Getting target Mode of CCU\");\n    //this.log(this.ccuID+ value);\n    \n    request.get({\n      url: \"http://\"+this.ccuIP+\"/config/xmlapi/state.cgi?datapoint_id=\"+this.ccuIDControlMode,\n    }, function(err, response, body) {\n\n      if (!err && response.statusCode == 200) {\n        \n        //that.log(\"Response:\"+response.body);\n        var responseInt = response.body.substring(83,84);\n        //that.log(responseString);\n        if (responseInt == 1) \n        { callback(parseInt(\"0\")); }\n        if (responseInt == 0) \n        { callback(parseInt(\"1\")); }\n        //that.log(\"Getting mode complete.\");\n      }\n      else {\n        that.log(\"Error '\"+err+\"' getting Mode: \" + body);\n      }\n    });\n  },\n  setMode: function(value) {\n\n    var that = this;\n    \n    //this.log(\"Seting target Mode of CCU:\" + value);\n    var modvalue;\n\tvar dpID;\n\tswitch(value) {\n\t\tcase 3: {modvalue = \"true\";dpID=this.ccuIDAutoMode;break;} //auto \n\t\tcase 1: {modvalue = \"true\";dpID=this.ccuIDAutoMode;break;} //heating => auto\n\t\tdefault: {modvalue = \"1\";dpID=this.ccuIDManuMode;}         //default => off (manual)\n\t}\n\n    request.put({\n      url: \"http://\"+this.ccuIP+\"/config/xmlapi/statechange.cgi?ise_id=\"+dpID+\"&new_value=\"+ modvalue,\n    }, function(err, response, body) {\n\n      if (!err && response.statusCode == 200) {\n        //that.log(\"Setting Mode complete.\");\n      }\n      else {\n        that.log(\"Error '\"+err+\"' setting Mode: \" + body);\n      }\n    });\n  },\n  getServices: function() {\n    var that = this;\n    return [{\n      sType: types.ACCESSORY_INFORMATION_STYPE,\n      characteristics: [{\n        cType: types.NAME_CTYPE,\n        onUpdate: null,\n        perms: [\"pr\"],\n        format: \"string\",\n        initialValue: this.name,\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Name of the accessory\",\n        designedMaxLength: 255\n      },{\n        cType: types.MANUFACTURER_CTYPE,\n        onUpdate: null,\n        perms: [\"pr\"],\n        format: \"string\",\n        initialValue: \"test\",\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Manufacturer\",\n        designedMaxLength: 255\n      },{\n        cType: types.MODEL_CTYPE,\n        onUpdate: null,\n        perms: [\"pr\"],\n        format: \"string\",\n        initialValue: \"test\",\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Model\",\n        designedMaxLength: 255\n      },{\n        cType: types.SERIAL_NUMBER_CTYPE,\n        onUpdate: null,\n        perms: [\"pr\"],\n        format: \"string\",\n        initialValue: \"A1S2NREF88EW\",\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"SN\",\n        designedMaxLength: 255\n      },{\n        cType: types.IDENTIFY_CTYPE,\n        onUpdate: null,\n        perms: [\"pw\"],\n        format: \"bool\",\n        initialValue: false,\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Identify Accessory\",\n        designedMaxLength: 1\n      }]\n    },{\n      sType: types.THERMOSTAT_STYPE,\n      characteristics: [{\n        cType: types.NAME_CTYPE,\n        onUpdate: null,\n        perms: [\"pr\"],\n        format: \"string\",\n        initialValue: this.name,\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Name of service\",\n        designedMaxLength: 255\n    },{\n\t\tcType: types.CURRENTHEATINGCOOLING_CTYPE,\n\t\tonRead: function(callback) { that.getMode(callback); },\n    \tperms: [\"pr\",\"ev\"],\n\t\tformat: \"int\",\n\t\tinitialValue: 0,\n\t\tsupportEvents: false,\n\t\tsupportBonjour: false,\n\t\tmanfDescription: \"Current Mode\",\n\t\tdesignedMaxLength: 1,\n\t\tdesignedMinValue: 0,\n\t\tdesignedMaxValue: 2,\n\t\tdesignedMinStep: 1,  \n    },{\n    \tcType: types.TARGETHEATINGCOOLING_CTYPE,\n\t\tonRead: function(callback) { that.getMode(callback); },\n    \tonUpdate: function(value) { that.setMode(value);},\n    \tperms: [\"pw\",\"pr\",\"ev\"],\n\t\tformat: \"int\",\n\t\tinitialValue: 0,\n\t\tsupportEvents: false,\n\t\tsupportBonjour: false,\n\t\tmanfDescription: \"Target Mode\",\n\t\tdesignedMinValue: 0,\n\t\tdesignedMaxValue: 3,\n\t\tdesignedMinStep: 1,\n    },{\n    \tcType: types.CURRENT_TEMPERATURE_CTYPE,\n\t\tonRead: function(callback) { that.getCurrentTemperature(callback); },\n    \tonUpdate: null,\n    \tperms: [\"pr\",\"ev\"],\n\t\tformat: \"float\",\n\t\tinitialValue: 13.0,\n\t\tsupportEvents: false,\n\t\tsupportBonjour: false,\n\t\tmanfDescription: \"Current Temperature\",\n\t\tunit: \"celsius\"\n    },{\n    \tcType: types.TARGET_TEMPERATURE_CTYPE,\n    \tonUpdate: function(value) { that.setTargetTemperature(value); },\n\tonRead: function(callback) { that.getTargetTemperature(callback); },\n    \tperms: [\"pw\",\"pr\",\"ev\"],\n\t\tformat: \"float\",\n\t\tinitialValue: 19.0,\n\t\tsupportEvents: false,\n\t\tsupportBonjour: false,\n\t\tmanfDescription: \"Target Temperature\",\n\t\tdesignedMinValue: 4,\n\t\tdesignedMaxValue: 25,\n\t\tdesignedMinStep: 0.1,\n\t\tunit: \"celsius\"\n      },{\n      \tcType: types.TEMPERATURE_UNITS_CTYPE,\n      \tonUpdate: null,\n      \tperms: [\"pr\",\"ev\"],\n\t  \tformat: \"int\",\n\t  \tinitialValue: 0,\n\t  \tsupportEvents: false,\n\t  \tsupportBonjour: false,\n\t  \tmanfDescription: \"Unit\"\n      }]\n    }];\n  }\n};\n\nmodule.exports.accessory = HomeMaticThermo;\n","/home/travis/build/npmtest/node-npmtest-homebridge-legacy-plugins/node_modules/homebridge-legacy-plugins/accessories/HomeMaticWindow.js":"var types = require(\"../api\").homebridge.hapLegacyTypes;\nvar Characteristic = require(\"../api\").homebridge.hap.Characteristic;\nvar request = require(\"request\");\n\nfunction HomeMaticWindow(log, config) {\n  this.log = log;\n  this.name = config[\"name\"];\n  this.ccuID = config[\"ccu_id\"];\n  this.ccuIP = config[\"ccu_ip\"];\n}\n\nHomeMaticWindow.prototype = {\n\n  \n  getPowerState: function(callback) {\n    var that = this;\n    \n    this.log(\"Getting Window State of CCU\");    \n    request.get({\n      url: \"http://\"+this.ccuIP+\"/config/xmlapi/state.cgi?datapoint_id=\"+this.ccuID,\n    }, function(err, response, body) {\n\n      if (!err && response.statusCode == 200) {\n        \n        //that.log(\"Response:\"+response.body);\n        var responseString = response.body.substring(83,84);\n        //that.log(responseString);\n\t    switch(responseString){\n\t\t              case \"0\": {callback(Characteristic.ContactSensorState.CONTACT_DETECTED);break;}\n\t\t              case \"1\": {callback(Characteristic.ContactSensorState.CONTACT_NOT_DETECTED);break;}\n                  case \"2\": {callback(Characteristic.ContactSensorState.CONTACT_NOT_DETECTED);break;}  \n\t    }\n        that.log(\"Getting Window State complete.\");\n      }\n      else {\n        that.log(\"Error '\"+err+\"' getting Window State: \" + body);\n      }\n    });\n  },\n\n  getServices: function() {\n    var that = this;\n    return [{\n      sType: types.ACCESSORY_INFORMATION_STYPE,\n      characteristics: [{\n        cType: types.NAME_CTYPE,\n        onUpdate: null,\n        perms: [\"pr\"],\n        format: \"string\",\n        initialValue: this.name,\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Name of the accessory\",\n        designedMaxLength: 255\n      },{\n        cType: types.MANUFACTURER_CTYPE,\n        onUpdate: null,\n        perms: [\"pr\"],\n        format: \"string\",\n        initialValue: \"Homematic\",\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Manufacturer\",\n        designedMaxLength: 255\n      },{\n        cType: types.MODEL_CTYPE,\n        onUpdate: null,\n        perms: [\"pr\"],\n        format: \"string\",\n        initialValue: \"HM-Sec-RHS\",\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Model\",\n        designedMaxLength: 255\n      },{\n        cType: types.SERIAL_NUMBER_CTYPE,\n        onUpdate: null,\n        perms: [\"pr\"],\n        format: \"string\",\n        initialValue: \"A1S2NASF88EW\",\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"SN\",\n        designedMaxLength: 255\n      },{\n        cType: types.IDENTIFY_CTYPE,\n        onUpdate: null,\n        perms: [\"pw\"],\n        format: \"bool\",\n        initialValue: false,\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Identify Accessory\",\n        designedMaxLength: 1\n      }]\n    },{\n      sType: types.CONTACT_SENSOR_STYPE,\n      characteristics: [{\n        cType: types.NAME_CTYPE,\n        onUpdate: null,\n        perms: [\"pr\"],\n        format: \"string\",\n        initialValue: this.name,\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Name of service\",\n        designedMaxLength: 255\n      },{\n        cType: types.CONTACT_SENSOR_STATE_CTYPE,\n\tonRead: function(callback) { that.getPowerState(callback); },\n        perms: [\"pr\",\"ev\"],\n        format: \"bool\",\n        initialValue: false,\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Get Window state of a Variable\",\n        designedMaxLength: 1\n      }]\n    }];\n  }\n};\n\nmodule.exports.accessory = HomeMaticWindow;\n","/home/travis/build/npmtest/node-npmtest-homebridge-legacy-plugins/node_modules/homebridge-legacy-plugins/accessories/HttpGarageDoorOpener.js":"/*\n{\n    \"bridge\": {\n        \"name\": \"Homebridge\",\n        \"username\": \"CC:22:3D:E3:CE:30\",\n        \"port\": 51826,\n        \"pin\": \"031-45-154\"\n    },\n    \n    \"description\": \"This is an example configuration file with all supported devices. You can use this as a template for creating your own configuration file containing devices you actually own.\",\n\n    \"platforms\": [],\n    \"accessories\": [\n        {\n            \"accessory\": \"HttpGarageDoorOpener\",\n            \"name\": \"Porte de Garage\",\n            \"description\": \"\",\n            \"open_url\": \"http://0.0.0.0:3000\",\n            \"http_method\": \"GET\"\n        }\n    ]\n}\n*/\n\nvar Service = require(\"../api\").homebridge.hap.Service;\nvar Characteristic = require(\"../api\").homebridge.hap.Characteristic;\n\nvar request = require(\"request\");\n\nmodule.exports = {\n  accessory: HttpGarageDoorOpener\n}\n\nfunction HttpGarageDoorOpener(log, config) {\n  this.log = log;\n  this.open_url = config[\"open_url\"];\n  this.http_method = config[\"http_method\"];\n  this.garageDoorStatus = Characteristic.CurrentDoorState.CLOSED;\n}\n\nHttpGarageDoorOpener.prototype = {\n  close: function (callback) {\n    this.garageDoorStatus = Characteristic.CurrentDoorState.CLOSED;\n    this.log(\"Door is\", this.getCurrentDoorStateReadable());\n    callback();\n  },\n\n  open: function (callback) {\n    this.garageDoorStatus = Characteristic.CurrentDoorState.OPEN;\n    this.log(\"Door is\", this.getCurrentDoorStateReadable());\n    callback();\n  },\n\n  identify: function() {\n    console.log(\"Identify the Door!\");\n  },\n  \n  getServices: function () {\n    this.garageDoorOpenerService = new Service.GarageDoorOpener();\n    \n    this.garageDoorOpenerService\n    .getCharacteristic(Characteristic.CurrentDoorState)\n    .on('get', this.getCurrentDoorState.bind(this));\n\n    this.garageDoorOpenerService\n    .getCharacteristic(Characteristic.TargetDoorState)\n    .on('set', this.setTargetDoorState.bind(this));\n\n    /*\n    garageDoorOpenerService\n    .getCharacteristic(Characteristic.ObstructionDetected)\n    .on('get', this.getObstructionDetected.bind(this))\n    .on('set', this.setObstructionDetected.bind(this));\n    */\n\n    var informationService = new Service.AccessoryInformation();\n    informationService\n      .setCharacteristic(Characteristic.Manufacturer, \"HTTP Manufacturer\")\n      .setCharacteristic(Characteristic.Model, \"HTTP Model\")\n      .setCharacteristic(Characteristic.SerialNumber, \"HTTP Serial Number\");\n\n    return [informationService, this.garageDoorOpenerService];\n  },\n\n  getCurrentDoorStateReadable: function () {\n    var textState = \"\";\n    switch (this.garageDoorStatus) {\n      case 0: textState = \"OPEN\"; break;\n      case 1: textState = \"CLOSED\"; break;\n      case 2: textState = \"OPENING\"; break;\n      case 3: textState = \"CLOSING\"; break;\n      case 4: textState = \"STOPPED\"; break;\n      default: this.log(\"Unhandled CurrentDoorState\");\n    }\n    return textState;\n  },\n\n  getCurrentDoorState: function(callback) {\n\n    this.log(\"The door is now\", this.getCurrentDoorStateReadable() ,\"(\"+ this.garageDoorStatus + \")\");\n\n    var error = null;\n    var returnValue = this.state;\n\n    callback(null, returnValue);\n  },\n\n  setTargetDoorState: function(value, callback) {\n    if(value === Characteristic.TargetDoorState.OPEN) {\n      this.open(callback);\n    } else {\n      this.close(callback);\n    }; \n  }\n};","/home/travis/build/npmtest/node-npmtest-homebridge-legacy-plugins/node_modules/homebridge-legacy-plugins/accessories/HttpHygrometer.js":"var Service = require(\"../api\").homebridge.hap.Service;\nvar Characteristic = require(\"../api\").homebridge.hap.Characteristic;\nvar request = require(\"request\");\n\nmodule.exports = {\n  accessory: HygrometerAccessory\n}\n\nfunction HygrometerAccessory(log, config) {\n  this.log = log;\n\n  // url info\n  this.url = config[\"url\"];\n  this.http_method = config[\"http_method\"];\n}\n\n\nHygrometerAccessory.prototype = {\n\n  httpRequest: function(url, method, callback) {\n    request({\n      url: url,\n      method: method\n    },\n    function (error, response, body) {\n      callback(error, response, body)\n    })\n  },\n\n\n  identify: function(callback) {\n    this.log(\"Identify requested!\");\n    callback(); // success\n  },\n\n  getCurrentRelativeHumidity: function (callback) {\n    var that = this;\n    that.log (\"getting CurrentCurrentRelativeHumidity\");\n\n    this.httpRequest(this.url, this.http_method, function(error, response, body) {\n      if (error) {\n        this.log('HTTP function failed: %s', error);\n        callback(error);\n      }\n      else {\n        this.log('HTTP function succeeded - %s', body);\n        callback(null, Number(body));\n      }\n    }.bind(this));\n  },  \n\n  getServices: function() {\n\n    // you can OPTIONALLY create an information service if you wish to override\n    // the default values for things like serial number, model, etc.\n    var informationService = new Service.AccessoryInformation();\n    \n    informationService\n      .setCharacteristic(Characteristic.Manufacturer, \"HTTP Manufacturer\")\n      .setCharacteristic(Characteristic.Model, \"HTTP Hygrometer\")\n      .setCharacteristic(Characteristic.SerialNumber, \"HTTP Serial Number\");\n    \n    var humidityService = new Service.HumiditySensor();\n\n    humidityService\n\t.getCharacteristic(Characteristic.CurrentRelativeHumidity)\n\t.on('get', this.getCurrentRelativeHumidity.bind(this));\n    \n    return [informationService, humidityService];\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-homebridge-legacy-plugins/node_modules/homebridge-legacy-plugins/accessories/HttpThermometer.js":"var Service = require(\"../api\").homebridge.hap.Service;\nvar Characteristic = require(\"../api\").homebridge.hap.Characteristic;\nvar request = require(\"request\");\n\nmodule.exports = {\n  accessory: ThermometerAccessory\n}\n\nfunction ThermometerAccessory(log, config) {\n  this.log = log;\n\n  // url info\n  this.url = config[\"url\"];\n  this.http_method = config[\"http_method\"];\n}\n\n\nThermometerAccessory.prototype = {\n\n  httpRequest: function(url, method, callback) {\n    request({\n      url: url,\n      method: method\n    },\n    function (error, response, body) {\n      callback(error, response, body)\n    })\n  },\n\n\n  identify: function(callback) {\n    this.log(\"Identify requested!\");\n    callback(); // success\n  },\n\n  getCurrentTemperature: function (callback) {\n    var that = this;\n    that.log (\"getting CurrentTemperature\");\n\n\n    this.httpRequest(this.url, this.http_method, function(error, response, body) {\n      if (error) {\n        this.log('HTTP function failed: %s', error);\n        callback(error);\n      }\n      else {\n        this.log('HTTP function succeeded - %s', body);\n        callback(null, Number(body));\n      }\n    }.bind(this));\n  },  \n\n  getTemperatureUnits: function (callback) {\n    var that = this;\n    that.log (\"getTemperature Units\");\n    // 1 = F and 0 = C\n    callback (null, 0);\n  },  \n\n  getServices: function() {\n\n    // you can OPTIONALLY create an information service if you wish to override\n    // the default values for things like serial number, model, etc.\n    var informationService = new Service.AccessoryInformation();\n    \n    informationService\n      .setCharacteristic(Characteristic.Manufacturer, \"HTTP Manufacturer\")\n      .setCharacteristic(Characteristic.Model, \"HTTP Thermometer\")\n      .setCharacteristic(Characteristic.SerialNumber, \"HTTP Serial Number\");\n    \n    var temperatureService = new Service.TemperatureSensor();\n\n    temperatureService\n\t.getCharacteristic(Characteristic.CurrentTemperature)\n\t.on('get', this.getCurrentTemperature.bind(this));\n    \n    return [informationService, temperatureService];\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-homebridge-legacy-plugins/node_modules/homebridge-legacy-plugins/accessories/mpdclient.js":"var Service = require(\"../api\").homebridge.hap.Service;\nvar Characteristic = require(\"../api\").homebridge.hap.Characteristic;\nvar request = require(\"request\");\nvar komponist = require('komponist')\n\nmodule.exports = {\n  accessory: MpdClient\n}\n\nfunction MpdClient(log, config) {\n  this.log = log;\n  this.host = config[\"host\"] || 'localhost';\n  this.port = config[\"port\"] || 6600;\n}\n\nMpdClient.prototype = {\n\n  setPowerState: function(powerOn, callback) {\n\n    var log = this.log;\n  \n    komponist.createConnection(this.port, this.host, function(error, client) {\n \n      if (error) {\n        return callback(error);\n      }\n \n      if (powerOn) {\n        client.play(function(error) {\n          log(\"start playing\");\n          client.destroy();\n          callback(error);\n        });\n      } else {\n        client.stop(function(error) {  \n          log(\"stop playing\");\n          client.destroy();\n          callback(error);\n        });\n      }\n\n    });\n  },\n\n  getPowerState: function(callback) {\n  \n    komponist.createConnection(this.port, this.host, function(error, client) {\n\n      if (error) {\n        return callback(error);\n      }\n \n      client.status(function(error, status) {\n\n          client.destroy();\n\n          if (status['state'] == 'play') {\n            callback(error, 1);\n          } else {\n            callback(error, 0);\n          }\n      });\n\n    });\n  },\n\n  identify: function(callback) {\n    this.log(\"Identify requested!\");\n    callback(); // success\n  },\n  \n  getServices: function() {\n\n    var informationService = new Service.AccessoryInformation();\n    \n    informationService\n      .setCharacteristic(Characteristic.Manufacturer, \"MPD\")\n      .setCharacteristic(Characteristic.Model, \"MPD Client\")\n      .setCharacteristic(Characteristic.SerialNumber, \"81536334\");\n    \n    var switchService = new Service.Switch();\n    \n    switchService.getCharacteristic(Characteristic.On)\n      .on('get', this.getPowerState.bind(this))\n      .on('set', this.setPowerState.bind(this));\n    \n    return [informationService, switchService];\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-homebridge-legacy-plugins/node_modules/homebridge-legacy-plugins/accessories/Tesla.js":"var types = require(\"../api\").homebridge.hapLegacyTypes;\nvar tesla = require(\"teslams\");\n\nfunction TeslaAccessory(log, config) {\n    this.log = log;\n    this.name = config[\"name\"];\n    this.username = config[\"username\"];\n    this.password = config[\"password\"];\n}\n\nTeslaAccessory.prototype = {\n\n    setPowerState: function(powerOn) {\n        var that = this;\n\n        tesla.get_vid({email: this.username, password: this.password}, function(vehicle) {\n\n            if (powerOn) {\n                tesla.auto_conditioning({id:vehicle, climate: 'start'}, function(response) {\n                    if (response.result)\n                        that.log(\"Started climate control.\");\n                    else\n                        that.log(\"Error starting climate control: \" + response.reason);\n                });\n            }\n            else {\n                tesla.auto_conditioning({id:vehicle, climate: 'stop'}, function(response) {\n                    if (response.result)\n                        that.log(\"Stopped climate control.\");\n                    else\n                        that.log(\"Error stopping climate control: \" + response.reason);\n                });\n            }\n        })\n    },\n\n    getServices: function() {\n        var that = this;\n        return [{\n            sType: types.ACCESSORY_INFORMATION_STYPE,\n            characteristics: [{\n                cType: types.NAME_CTYPE,\n                onUpdate: null,\n                perms: [\"pr\"],\n                format: \"string\",\n                initialValue: this.name,\n                supportEvents: false,\n                supportBonjour: false,\n                manfDescription: \"Name of the accessory\",\n                designedMaxLength: 255\n            },{\n                cType: types.MANUFACTURER_CTYPE,\n                onUpdate: null,\n                perms: [\"pr\"],\n                format: \"string\",\n                initialValue: \"Tesla\",\n                supportEvents: false,\n                supportBonjour: false,\n                manfDescription: \"Manufacturer\",\n                designedMaxLength: 255\n            },{\n                cType: types.MODEL_CTYPE,\n                onUpdate: null,\n                perms: [\"pr\"],\n                format: \"string\",\n                initialValue: \"Rev-1\",\n                supportEvents: false,\n                supportBonjour: false,\n                manfDescription: \"Model\",\n                designedMaxLength: 255\n            },{\n                cType: types.SERIAL_NUMBER_CTYPE,\n                onUpdate: null,\n                perms: [\"pr\"],\n                format: \"string\",\n                initialValue: \"A1S2NASF88EW\",\n                supportEvents: false,\n                supportBonjour: false,\n                manfDescription: \"SN\",\n                designedMaxLength: 255\n            },{\n                cType: types.IDENTIFY_CTYPE,\n                onUpdate: null,\n                perms: [\"pw\"],\n                format: \"bool\",\n                initialValue: false,\n                supportEvents: false,\n                supportBonjour: false,\n                manfDescription: \"Identify Accessory\",\n                designedMaxLength: 1\n            }]\n        },{\n            sType: types.SWITCH_STYPE,\n            characteristics: [{\n                cType: types.NAME_CTYPE,\n                onUpdate: null,\n                perms: [\"pr\"],\n                format: \"string\",\n                initialValue: this.name,\n                supportEvents: false,\n                supportBonjour: false,\n                manfDescription: \"Name of service\",\n                designedMaxLength: 255\n            },{\n                cType: types.POWER_STATE_CTYPE,\n                onUpdate: function(value) { that.setPowerState(value); },\n                perms: [\"pw\",\"pr\",\"ev\"],\n                format: \"bool\",\n                initialValue: false,\n                supportEvents: false,\n                supportBonjour: false,\n                manfDescription: \"Change the power state of the car\",\n                designedMaxLength: 1\n            }]\n        }];\n    }\n};\n\nmodule.exports.accessory = TeslaAccessory;\n","/home/travis/build/npmtest/node-npmtest-homebridge-legacy-plugins/node_modules/homebridge-legacy-plugins/accessories/X10.js":"var types = require(\"../api\").homebridge.hapLegacyTypes;\nvar request = require(\"request\");\n\nfunction X10(log, config) {\n  this.log = log;\n  this.ip_address = config[\"ip_address\"];\n  this.name = config[\"name\"];\n  this.deviceID = config[\"device_id\"];\n  this.protocol = config[\"protocol\"];\n  this.canDim = config[\"can_dim\"];\n}\n\nX10.prototype = {\n\n  setPowerState: function(powerOn) {\n\n    var binaryState = powerOn ? \"on\" : \"off\";\n    var that = this;\n    \n    this.log(\"Setting power state of \" + this.deviceID + \" to \" + powerOn);\n    request.put({\n      url: \"http://\"+this.ip_address+\"/x10/\"+this.deviceID+\"/power/\"+binaryState+\"?protocol=\"+this.protocol,\n    }, function(err, response, body) {\n\n      if (!err && response.statusCode == 200) {\n        that.log(\"State change complete.\");\n      }\n      else {\n        that.log(\"Error '\"+err+\"' setting power state: \" + body);\n      }\n    });\n  },\n\n  setBrightnessLevel: function(value) {\n\n    var that = this;\n    \n    this.log(\"Setting brightness level of \" + this.deviceID + \" to \" + value);\n    request.put({\n      url: \"http://\"+this.ip_address+\"/x10/\"+this.deviceID+\"/brightness/?protocol=\"+this.protocol+\"&value=\"+value,\n    }, function(err, response, body) {\n\n      if (!err && response.statusCode == 200) {\n        that.log(\"State change complete.\");\n      }\n      else {\n        that.log(\"Error '\"+err+\"' setting brightness level: \" + body);\n      }\n    });\n  },\n\n  getServices: function() {\n    var that = this;\n    var services = [{\n      sType: types.ACCESSORY_INFORMATION_STYPE,\n      characteristics: [{\n        cType: types.NAME_CTYPE,\n        onUpdate: null,\n        perms: [\"pr\"],\n        format: \"string\",\n        initialValue: this.name,\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Name of the accessory\",\n        designedMaxLength: 255\n      },{\n        cType: types.MANUFACTURER_CTYPE,\n        onUpdate: null,\n        perms: [\"pr\"],\n        format: \"string\",\n        initialValue: \"X10\",\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Manufacturer\",\n        designedMaxLength: 255\n      },{\n        cType: types.MODEL_CTYPE,\n        onUpdate: null,\n        perms: [\"pr\"],\n        format: \"string\",\n        initialValue: \"Rev-1\",\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Model\",\n        designedMaxLength: 255\n      },{\n        cType: types.SERIAL_NUMBER_CTYPE,\n        onUpdate: null,\n        perms: [\"pr\"],\n        format: \"string\",\n        initialValue: \"A1S2NASF88EW\",\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"SN\",\n        designedMaxLength: 255\n      },{\n        cType: types.IDENTIFY_CTYPE,\n        onUpdate: null,\n        perms: [\"pw\"],\n        format: \"bool\",\n        initialValue: false,\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Identify Accessory\",\n        designedMaxLength: 1\n      }]\n    },{\n      sType: types.LIGHTBULB_STYPE,\n      characteristics: [{\n        cType: types.NAME_CTYPE,\n        onUpdate: null,\n        perms: [\"pr\"],\n        format: \"string\",\n        initialValue: this.name,\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Name of service\",\n        designedMaxLength: 255\n      },{\n        cType: types.POWER_STATE_CTYPE,\n        onUpdate: function(value) { that.setPowerState(value); },\n        perms: [\"pw\",\"pr\",\"ev\"],\n        format: \"bool\",\n        initialValue: false,\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Change the power state of a Variable\",\n        designedMaxLength: 1\n      }]\n    }];\n    if (that.canDim) {\n      services[1].characteristics.push({\n        cType: types.BRIGHTNESS_CTYPE,\n        onUpdate: function(value) { that.setBrightnessLevel(value); },\n        perms: [\"pw\",\"pr\",\"ev\"],\n        format: \"int\",\n        initialValue: 0,\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Adjust Brightness of Light\",\n        designedMinValue: 0,\n        designedMaxValue: 100,\n        designedMinStep: 1,\n        unit: \"%\"\n      });\n    }\n    return services;\n  }\n};\n\nmodule.exports.accessory = X10;\n","/home/travis/build/npmtest/node-npmtest-homebridge-legacy-plugins/node_modules/homebridge-legacy-plugins/platforms/Domoticz.js":"// Domoticz Platform Shim for HomeBridge\n// Written by Joep Verhaeg (http://www.joepverhaeg.nl)\n//\n// Revisions:\n//\n// 12 June 2015 [GizMoCuz]\n// - Added support for RGB lights\n// - Added support for Scenes\n// - Sorting device names\n//\n// 22 July 2015 [lukeredpath]\n// - Added SSL and basic auth support\n//\n// 26 August 2015 [EddyK69]\n// - Added parameter in config.json: 'loadscenes' for enabling/disabling loading scenes\n// - Fixed issue with dimmer-range; was 0-100, should be 0-16\n//\n// 27 August 2015 [EddyK69]\n// - Fixed issue that 'on/off'-type lights showed as dimmers in HomeKit. Checking now on SwitchType instead of HaveDimmer\n// - Fixed issue that 'on-off'-type lights would not react on Siri 'Switch on/off light'; On/Off types are now handled as Lights instead of Switches\n//   (Cannot determine if 'on/off'-type device is a Light or a Switch :( )\n//\n// 14 September 2015 [lukeredpath]\n// - Fixed incorrect dimmer range for LightwaveRF lights (0-32 required, MaxDimLevel should be honored)\n//\n//\n// Domoticz JSON API required\n// https://www.domoticz.com/wiki/Domoticz_API/JSON_URL's#Lights_and_switches\n//\n// Remember to add platform to config.json. Example:\n// \"platforms\": [\n//     {\n//         \"platform\": \"Domoticz\",\n//         \"name\": \"Domoticz\",\n//         \"server\": \"127.0.0.1\",\n//         \"port\": \"8080\",\n//         \"roomid\": 123,  (0=no roomplan)\n//         \"loadscenes\": 1 (0=disable scenes)\n//     }\n// ],\n//\n// If your server uses HTTPS, you can specify \"ssl\": true in your config. If\n// your server uses a self-signed certificate, you'll need to run the following\n// before starting the server or you will get an error:\n//\n//    export NODE_TLS_REJECT_UNAUTHORIZED=0\n//\n// For basic auth support, specify the \"user\" and \"password\" in your config.\n//\n// When you attempt to add a device, it will ask for a \"PIN code\".\n// The default code for all HomeBridge accessories is 031-45-154.\n//\nvar types = require(\"../api\").homebridge.hapLegacyTypes;\nvar request = require(\"request\");\n\nfunction DomoticzPlatform(log, config){\n\tthis.log     = log;\n\tthis.user = config[\"user\"];\n\tthis.password = config[\"password\"];\n\tthis.server  = config[\"server\"];\n\tthis.port    = config[\"port\"];\n\tthis.protocol = config[\"ssl\"] ? \"https\" : \"http\";\n\tthis.roomid  = 0;\n\tif (typeof config[\"roomid\"] != 'undefined') {\n\t\tthis.roomid = config[\"roomid\"];\n\t}\n\tthis.loadscenes = 1;\n\tif (typeof config[\"loadscenes\"] != 'undefined') {\n\t\tthis.loadscenes = config[\"loadscenes\"];\n\t}\n}\n\nfunction sortByKey(array, key) {\n    return array.sort(function(a, b) {\n        var x = a[key]; var y = b[key];\n        return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n    });\n}\n\nDomoticzPlatform.prototype = {\n  urlForQuery: function(query) {\n    var serverString = this.server;\n    if (this.user && this.password) {\n      serverString = this.user + \":\" + this.password + \"@\" + serverString;\n    }\n    return this.protocol + \"://\" + serverString + \":\" + this.port + \"/json.htm?\" + query;\n  },\n  \n\taccessories: function(callback) {\n\t\tthis.log(\"Fetching Domoticz lights and switches...\");\n\t\tvar that = this;\n\t\tvar foundAccessories = [];\n\t\t\n\t\t// mechanism to ensure callback is only executed once all requests complete\n\t\tvar asyncCalls = 0;\n\t\tfunction callbackLater() { if (--asyncCalls == 0) callback(foundAccessories); }\n\t\t\n\t\tif (this.roomid == 0) {\n\t\t\t//Get Lights\n\t\t\tasyncCalls++;\n\t\t\trequest.get({\n\t\t\t\turl: this.urlForQuery(\"type=devices&filter=light&used=true&order=Name\"),\n\t\t\t\tjson: true\n\t\t\t}, function(err, response, json) {\n\t\t\t\tif (!err && response.statusCode == 200) {\n\t\t\t\t\tif (json['result'] != undefined) {\n\t\t\t\t\t\tvar sArray=sortByKey(json['result'],\"Name\");\n\t\t\t\t\t\tsArray.map(function(s) {\n\t\t\t\t\t\t\tvar havedimmer = (s.SwitchType == 'Dimmer')\n\t\t\t\t\t\t\taccessory = new DomoticzAccessory(that.log, that, false, s.idx, s.Name, havedimmer, s.MaxDimLevel, (s.SubType==\"RGB\")||(s.SubType==\"RGBW\"));\n\t\t\t\t\t\t\tfoundAccessories.push(accessory);\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t\tcallbackLater();\n\t\t\t\t} else {\n\t\t\t\t\tthat.log(\"There was a problem connecting to Domoticz. (\" + err + \")\");\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\t//Get all devices specified in the room\n\t\t\tasyncCalls++;\n\t\t\trequest.get({\n\t\t\t\turl: this.urlForQuery(\"type=devices&plan=\" + this.roomid),\n\t\t\t\tjson: true\n\t\t\t}, function(err, response, json) {\n\t\t\t\tif (!err && response.statusCode == 200) {\n\t\t\t\t\tif (json['result'] != undefined) {\n\t\t\t\t\t\tvar sArray=sortByKey(json['result'],\"Name\");\n\t\t\t\t\t\tsArray.map(function(s) {\n\t\t\t\t\t\t\t//only accept switches for now\n\t\t\t\t\t\t\tif (typeof s.SwitchType != 'undefined') {\n\t\t\t\t\t\t\t\tvar havedimmer = (s.SwitchType == 'Dimmer')\n\t\t\t\t\t\t\t\taccessory = new DomoticzAccessory(that.log, that, false, s.idx, s.Name, havedimmer, s.MaxDimLevel, (s.SubType==\"RGB\")||(s.SubType==\"RGBW\"));\n\t\t\t\t\t\t\t\tfoundAccessories.push(accessory);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t\tcallbackLater();\n\t\t\t\t} else {\n\t\t\t\t\tthat.log(\"There was a problem connecting to Domoticz.\");\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t//Get Scenes\n\t\tif (this.loadscenes == 1) {\n\t\t\tasyncCalls++;\n\t\t\trequest.get({\n\t\t\t\turl: this.urlForQuery(\"type=scenes\"),\n\t\t\t\tjson: true\n\t\t\t}, function(err, response, json) {\n\t\t\t\tif (!err && response.statusCode == 200) {\n\t\t\t\t\tif (json['result'] != undefined) {\n\t\t\t\t\t\tvar sArray=sortByKey(json['result'],\"Name\");\n\t\t\t\t\t\tsArray.map(function(s) {\n\t\t\t\t\t\t\taccessory = new DomoticzAccessory(that.log, that, true, s.idx, s.Name, false, 0, false);\n\t\t\t\t\t\t\tfoundAccessories.push(accessory);\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t\tcallbackLater();\n\t\t\t\t} else {\n\t\t\t\t\tthat.log(\"There was a problem connecting to Domoticz.\");\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n}\n\nfunction DomoticzAccessory(log, platform, IsScene, idx, name, HaveDimmer, MaxDimLevel, HaveRGB) {\n  // device info\n  this.IsScene\t\t= IsScene;\n  this.idx\t\t\t= idx;\n  this.name\t\t\t= name;\n  this.HaveDimmer\t= HaveDimmer;\n  this.MaxDimLevel\t= MaxDimLevel;\n  this.HaveRGB\t\t= HaveRGB;\n  this.log \t\t\t= log;\n  this.platform = platform;\n}\n\nDomoticzAccessory.prototype = {\n\tcommand: function(c,value) {\n\t\tthis.log(this.name + \" sending command \" + c + \" with value \" + value);\n\t\tif (this.IsScene == false) {\n\t\t\t//Lights\n\t\t\tif (c == \"On\" || c == \"Off\") {\n\t\t\t\turl = this.platform.urlForQuery(\"type=command&param=switchlight&idx=\" + this.idx + \"&switchcmd=\" + c + \"&level=0\");\n\t\t\t}\n\t\t\telse if (c == \"setHue\") {\n\t\t\t\turl = this.platform.urlForQuery(\"type=command&param=setcolbrightnessvalue&idx=\" + this.idx + \"&hue=\" + value + \"&brightness=100\" + \"&iswhite=false\");\n\t\t\t}\n\t\t\telse if (c == \"setLevel\") {\n                                value = this.dimmerLevelForValue(value)\n\t\t\t\turl = this.platform.urlForQuery(\"type=command&param=switchlight&idx=\" + this.idx + \"&switchcmd=Set%20Level&level=\" + value);\n\t\t\t}\n\t\t\telse if (value != undefined) {\n\t\t\t\tthis.log(this.name + \" Unhandled Light command! cmd=\" + c + \", value=\" + value);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t//Scenes\n\t\t\tif (c == \"On\" || c == \"Off\") {\n\t\t\t\turl = this.platform.urlForQuery(\"type=command&param=switchscene&idx=\" + this.idx + \"&switchcmd=\" + c);\n\t\t\t}\n\t\t\telse if (value != undefined) {\n\t\t\t\tthis.log(this.name + \" Unhandled Scene command! cmd=\" + c + \", value=\" + value);\n\t\t\t}\n\t\t}\n\n    var that = this;\n\t\trequest.put({ url: url }, function(err, response) {\n\t\t\tif (err) {\n\t\t\t\tthat.log(\"There was a problem sending command \" + c + \" to\" + that.name);\n\t\t\t\tthat.log(url);\n\t\t\t} else {\n\t\t\t\tthat.log(that.name + \" sent command \" + c + \" (value: \" + value + \")\");\n      \t\t}\n      \t})\n  \t},\n\n  // translates the HomeKit dim level as a percentage to whatever scale the device requires\n  dimmerLevelForValue: function(value) {\n    if (this.MaxDimLevel == 100) {\n      return value;\n    }\n    return Math.round((value / 100.0) * this.MaxDimLevel) \n  },\n\n  informationCharacteristics: function() {\n    return [\n      {\n        cType: types.NAME_CTYPE,\n        onUpdate: null,\n        perms: [\"pr\"],\n        format: \"string\",\n        initialValue: this.name,\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Name of the accessory\",\n        designedMaxLength: 255\n      },{\n        cType: types.MANUFACTURER_CTYPE,\n        onUpdate: null,\n        perms: [\"pr\"],\n        format: \"string\",\n        initialValue: \"Domoticz\",\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Manufacturer\",\n        designedMaxLength: 255\n      },{\n        cType: types.MODEL_CTYPE,\n        onUpdate: null,\n        perms: [\"pr\"],\n        format: \"string\",\n        initialValue: \"Rev-1\",\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Model\",\n        designedMaxLength: 255\n      },{\n        cType: types.SERIAL_NUMBER_CTYPE,\n        onUpdate: null,\n        perms: [\"pr\"],\n        format: \"string\",\n        initialValue: \"A1S2NASF88EW\",\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"SN\",\n        designedMaxLength: 255\n      },{\n        cType: types.IDENTIFY_CTYPE,\n        onUpdate: null,\n        perms: [\"pw\"],\n        format: \"bool\",\n        initialValue: false,\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Identify Accessory\",\n        designedMaxLength: 1\n      }\n    ]\n  },\n\n  controlCharacteristics: function(that) {\n    cTypes = [{\n      cType: types.NAME_CTYPE,\n      onUpdate: null,\n      perms: [\"pr\"],\n      format: \"string\",\n      initialValue: this.name,\n      supportEvents: true,\n      supportBonjour: false,\n      manfDescription: \"Name of service\",\n      designedMaxLength: 255\n    }]\n\n    if (this.idx != undefined) {\n      cTypes.push({\n        cType: types.POWER_STATE_CTYPE,\n        onUpdate: function(value) {\n          if (value == 0) {\n            that.command(\"Off\")\n          } else {\n            that.command(\"On\")\n          }\n        },\n        perms: [\"pw\",\"pr\",\"ev\"],\n        format: \"bool\",\n        initialValue: 0,\n        supportEvents: true,\n        supportBonjour: false,\n        manfDescription: \"Change the power state\",\n        designedMaxLength: 1\n      })\n    }\n\n    if (this.HaveDimmer == true) {\n      cTypes.push({\n        cType: types.BRIGHTNESS_CTYPE,\n        onUpdate: function(value) { that.command(\"setLevel\", value); },\n        perms: [\"pw\",\"pr\",\"ev\"],\n        format: \"int\",\n        initialValue:  0,\n        supportEvents: true,\n        supportBonjour: false,\n        manfDescription: \"Adjust Brightness of Light\",\n        designedMinValue: 0,\n        designedMaxValue: this.MaxDimLevel,\n        designedMinStep: 1,\n        unit: \"%\"\n      })\n    }\n    if (this.HaveRGB == true) {\n      cTypes.push({\n        cType: types.HUE_CTYPE,\n        onUpdate: function(value) { that.command(\"setHue\", value); },\n        perms: [\"pw\",\"pr\",\"ev\"],\n        format: \"int\",\n        initialValue:  0,\n        supportEvents: true,\n        supportBonjour: false,\n        manfDescription: \"Adjust Hue of Light\",\n        designedMinValue: 0,\n        designedMaxValue: 360,\n        designedMinStep: 1,\n        unit: \"arcdegrees\"\n      })\n    }\n\n    return cTypes\n  },\n\n  sType: function() {\n    //if (this.HaveDimmer == true) {\n      return types.LIGHTBULB_STYPE\n    //} else {\n    //  return types.SWITCH_STYPE\n    //}\n  },\n\n  getServices: function() {\n    var that = this;\n    var services = [{\n      sType: types.ACCESSORY_INFORMATION_STYPE,\n      characteristics: this.informationCharacteristics(),\n    },\n    {\n      sType: this.sType(),\n      characteristics: this.controlCharacteristics(that)\n    }];\n    this.log(\"Loaded services for \" + this.name)\n    return services;\n  }\n};\n\nmodule.exports.accessory = DomoticzAccessory;\nmodule.exports.platform = DomoticzPlatform;\n","/home/travis/build/npmtest/node-npmtest-homebridge-legacy-plugins/node_modules/homebridge-legacy-plugins/platforms/HomeAssistant.js":"// Home Assistant\n//\n// Current Support: lights\n//\n// This is a shim to publish lights maintained by Home Assistant.\n// Home Assistant is an open-source home automation platform.\n// URL:     http://home-assistant.io\n// GitHub:  https://github.com/balloob/home-assistant\n//\n// HA accessories supported: Lights, Switches, Media Players, Scenes.\n//\n// Optional Devices - Edit the supported_types key in the config to pick which\n//                    of the 4 types you would like to expose to HomeKit from\n//                    Home Assistant. light, switch, media_player, scene.\n//\n//\n// Scene Support\n//\n// You can optionally import your Home Assistant scenes. These will appear to\n// HomeKit as switches. You can simply say \"turn on party time\". In some cases\n// scenes names are already rerved in HomeKit...like \"Good Morning\" and\n// \"Good Night\". You will be able to just say \"Good Morning\" or \"Good Night\" to\n// have these triggered.\n//\n// You might want to play with the wording to figure out what ends up working well\n// for your scene names. It's also important to not populate any actual HomeKit\n// scenes with the same names, as Siri will pick these instead of your Home\n// Assistant scenes.\n//\n//\n//\n// Media Player Support\n//\n// Media players on your Home Assistant will be added to your HomeKit as a light.\n// While this seems like a hack at first, it's actually quite useful. You can\n// turn them on, off, and set their volume (as a function of brightness).\n//\n// There are some rules to know about how on/off treats your media player. If\n// your media player supports play/pause, then turning them on and off via\n// HomeKit will play and pause them. If they do not support play/pause but then\n// support on/off they will be turned on and then off.\n//\n// HomeKit does not have a characteristic of Volume or a Speaker type. So we are\n// using the light device type here. So to turn your speaker up and down, you\n// will need to use the same language you use to set the brighness of a light.\n// You can play around with language to see what fits best.\n//\n//\n//\n// Examples\n//\n// Dim the Kitchen Speaker to 40% - sets volume to 40%\n// Dim the the Kitchen Speaker 10% - lowers the volume by 10%\n// Set the brightness of the Kitchen Speaker to 40%\n//\n// Remember to add platform to config.json. Example:\n// \"platforms\": [\n//    {\n//        \"platform\": \"HomeAssistant\",\n//        \"name\": \"HomeAssistant\",\n//        \"host\": \"http://192.168.1.50:8123\",\n//        \"password\": \"xxx\",\n//        \"supported_types\": [\"light\", \"switch\", \"media_player\", \"scene\"]\n//    }\n// ]\n//\n// When you attempt to add a device, it will ask for a \"PIN code\".\n// The default code for all HomeBridge accessories is 031-45-154.\n\nvar Service = require(\"../api\").homebridge.hap.Service;\nvar Characteristic = require(\"../api\").homebridge.hap.Characteristic;\nvar url = require('url')\nvar request = require(\"request\");\n\nvar communicationError = new Error('Can not communicate with Home Assistant.')\n\nfunction HomeAssistantPlatform(log, config){\n\n  // auth info\n  this.host = config[\"host\"];\n  this.password = config[\"password\"];\n  this.supportedTypes = config[\"supported_types\"];\n\n  this.log = log;\n}\n\nHomeAssistantPlatform.prototype = {\n  _request: function(method, path, options, callback) {\n    var self = this\n    var requestURL = this.host + '/api' + path\n    options = options || {}\n    options.query = options.query || {}\n\n    var reqOpts = {\n      url: url.parse(requestURL),\n      method: method || 'GET',\n      qs: options.query,\n      body: JSON.stringify(options.body),\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'x-ha-access': this.password\n      }\n    }\n\n    request(reqOpts, function onResponse(error, response, body) {\n      if (error) {\n        callback(error, response)\n        return\n      }\n\n      if (response.statusCode === 401) {\n        callback(new Error('You are not authenticated'), response)\n        return\n      }\n\n      json = JSON.parse(body)\n      callback(error, response, json)\n    })\n\n  },\n  fetchState: function(entity_id, callback){\n    this._request('GET', '/states/' + entity_id, {}, function(error, response, data){\n      if (error) {\n        callback(null)\n      }else{\n        callback(data)\n      }\n    })\n  },\n  callService: function(domain, service, service_data, callback){\n    var options = {}\n    options.body = service_data\n\n    this._request('POST', '/services/' + domain + '/' + service, options, function(error, response, data){\n      if (error) {\n        callback(null)\n      }else{\n        callback(data)\n      }\n    })\n  },\n  accessories: function(callback) {\n    this.log(\"Fetching HomeAssistant devices.\");\n\n    var that = this;\n    var foundAccessories = [];\n\n    this._request('GET', '/states', {}, function(error, response, data){\n\n      for (var i = 0; i < data.length; i++) {\n        entity = data[i]\n        entity_type = entity.entity_id.split('.')[0]\n\n        // ignore devices that are not in the list of supported types\n        if (that.supportedTypes.indexOf(entity_type) == -1) {\n          continue;\n        }\n\n        // ignore hidden devices\n        if (entity.attributes && entity.attributes.hidden) {\n          continue;\n        }\n\n        var accessory = null\n\n        if (entity_type == 'light') {\n          accessory = new HomeAssistantLight(that.log, entity, that)\n        }else if (entity_type == 'switch'){\n          console.log(JSON.stringify(entity))\n          console.log(\"\");\n          console.log(\"\");\n          accessory = new HomeAssistantSwitch(that.log, entity, that)\n        }else if (entity_type == 'scene'){\n          accessory = new HomeAssistantSwitch(that.log, entity, that, 'scene')\n        }else if (entity_type == 'media_player' && entity.attributes && entity.attributes.supported_media_commands){\n          accessory = new HomeAssistantMediaPlayer(that.log, entity, that)\n        }\n\n        if (accessory) {\n          foundAccessories.push(accessory)\n        }\n      }\n\n      callback(foundAccessories)\n    })\n\n  }\n}\n\nfunction HomeAssistantLight(log, data, client) {\n  // device info\n  this.domain = \"light\"\n  this.data = data\n  this.entity_id = data.entity_id\n  if (data.attributes && data.attributes.friendly_name) {\n    this.name = data.attributes.friendly_name\n  }else{\n    this.name = data.entity_id.split('.').pop().replace(/_/g, ' ')\n  }\n\n  this.client = client\n  this.log = log;\n}\n\nHomeAssistantLight.prototype = {\n  getPowerState: function(callback){\n    this.log(\"fetching power state for: \" + this.name);\n\n    this.client.fetchState(this.entity_id, function(data){\n      if (data) {\n        powerState = data.state == 'on'\n        callback(null, powerState)\n      }else{\n        callback(communicationError)\n      }\n    }.bind(this))\n  },\n  getBrightness: function(callback){\n    this.log(\"fetching brightness for: \" + this.name);\n\n    this.client.fetchState(this.entity_id, function(data){\n      if (data && data.attributes) {\n        brightness = ((data.attributes.brightness || 0) / 255)*100\n        callback(null, brightness)\n      }else{\n        callback(communicationError)\n      }\n    }.bind(this))\n  },\n  setPowerState: function(powerOn, callback) {\n    var that = this;\n    var service_data = {}\n    service_data.entity_id = this.entity_id\n\n    if (powerOn) {\n      this.log(\"Setting power state on the '\"+this.name+\"' to on\");\n\n      this.client.callService(this.domain, 'turn_on', service_data, function(data){\n        if (data) {\n          that.log(\"Successfully set power state on the '\"+that.name+\"' to on\");\n          callback()\n        }else{\n          callback(communicationError)\n        }\n      }.bind(this))\n    }else{\n      this.log(\"Setting power state on the '\"+this.name+\"' to off\");\n\n      this.client.callService(this.domain, 'turn_off', service_data, function(data){\n        if (data) {\n          that.log(\"Successfully set power state on the '\"+that.name+\"' to off\");\n          callback()\n        }else{\n          callback(communicationError)\n        }\n      }.bind(this))\n    }\n  },\n  setBrightness: function(level, callback) {\n    var that = this;\n    var service_data = {}\n    service_data.entity_id = this.entity_id\n\n    service_data.brightness = 255*(level/100.0)\n\n    this.log(\"Setting brightness on the '\"+this.name+\"' to \" + level);\n\n    this.client.callService(this.domain, 'turn_on', service_data, function(data){\n      if (data) {\n        that.log(\"Successfully set brightness on the '\"+that.name+\"' to \" + level);\n        callback()\n      }else{\n        callback(communicationError)\n      }\n    }.bind(this))\n  },\n  getServices: function() {\n    var lightbulbService = new Service.Lightbulb();\n    var informationService = new Service.AccessoryInformation();\n\n    informationService\n      .setCharacteristic(Characteristic.Manufacturer, \"Home Assistant\")\n      .setCharacteristic(Characteristic.Model, \"Light\")\n      .setCharacteristic(Characteristic.SerialNumber, \"xxx\");\n\n    lightbulbService\n      .getCharacteristic(Characteristic.On)\n      .on('get', this.getPowerState.bind(this))\n      .on('set', this.setPowerState.bind(this));\n\n    lightbulbService\n      .addCharacteristic(Characteristic.Brightness)\n      .on('get', this.getBrightness.bind(this))\n      .on('set', this.setBrightness.bind(this));\n\n    return [informationService, lightbulbService];\n  }\n\n}\n\nfunction HomeAssistantMediaPlayer(log, data, client) {\n  var SUPPORT_PAUSE = 1\n  var SUPPORT_SEEK = 2\n  var SUPPORT_VOLUME_SET = 4\n  var SUPPORT_VOLUME_MUTE = 8\n  var SUPPORT_PREVIOUS_TRACK = 16\n  var SUPPORT_NEXT_TRACK = 32\n  var SUPPORT_YOUTUBE = 64\n  var SUPPORT_TURN_ON = 128\n  var SUPPORT_TURN_OFF = 256\n\n  // device info\n  this.domain = \"media_player\"\n  this.data = data\n  this.entity_id = data.entity_id\n  this.supportsVolume = false\n  this.supportedMediaCommands = data.attributes.supported_media_commands\n\n  if (data.attributes && data.attributes.friendly_name) {\n    this.name = data.attributes.friendly_name\n  }else{\n    this.name = data.entity_id.split('.').pop().replace(/_/g, ' ')\n  }\n\n  if ((this.supportedMediaCommands | SUPPORT_PAUSE) == this.supportedMediaCommands) {\n    this.onState = \"playing\"\n    this.offState = \"paused\"\n    this.onService = \"media_play\"\n    this.offService = \"media_pause\"\n  }else if ((this.supportedMediaCommands | SUPPORT_TURN_ON) == this.supportedMediaCommands && (this.supportedMediaCommands | SUPPORT_TURN_OFF) == this.supportedMediaCommands) {\n    this.onState = \"on\"\n    this.offState = \"off\"\n    this.onService = \"turn_on\"\n    this.offService = \"turn_off\"\n  }\n\n  if ((this.supportedMediaCommands | SUPPORT_VOLUME_SET) == this.supportedMediaCommands) {\n    this.supportsVolume = true\n  }\n\n  this.client = client\n  this.log = log;\n}\n\nHomeAssistantMediaPlayer.prototype = {\n  getPowerState: function(callback){\n    this.log(\"fetching power state for: \" + this.name);\n\n    this.client.fetchState(this.entity_id, function(data){\n      if (data) {\n        powerState = data.state == this.onState\n        callback(null, powerState)\n      }else{\n        callback(communicationError)\n      }\n    }.bind(this))\n  },\n  getVolume: function(callback){\n    this.log(\"fetching volume for: \" + this.name);\n    that = this\n    this.client.fetchState(this.entity_id, function(data){\n      if (data && data.attributes) {\n        that.log(JSON.stringify(data.attributes))\n        level = data.attributes.volume_level ? data.attributes.volume_level*100 : 0\n        callback(null, level)\n      }else{\n        callback(communicationError)\n      }\n    }.bind(this))\n  },\n  setPowerState: function(powerOn, callback) {\n    var that = this;\n    var service_data = {}\n    service_data.entity_id = this.entity_id\n\n    if (powerOn) {\n      this.log(\"Setting power state on the '\"+this.name+\"' to on\");\n\n      this.client.callService(this.domain, this.onService, service_data, function(data){\n        if (data) {\n          that.log(\"Successfully set power state on the '\"+that.name+\"' to on\");\n          callback()\n        }else{\n          callback(communicationError)\n        }\n      }.bind(this))\n    }else{\n      this.log(\"Setting power state on the '\"+this.name+\"' to off\");\n\n      this.client.callService(this.domain, this.offService, service_data, function(data){\n        if (data) {\n          that.log(\"Successfully set power state on the '\"+that.name+\"' to off\");\n          callback()\n        }else{\n          callback(communicationError)\n        }\n      }.bind(this))\n    }\n  },\n  setVolume: function(level, callback) {\n    var that = this;\n    var service_data = {}\n    service_data.entity_id = this.entity_id\n\n    service_data.volume_level = level/100.0\n\n    this.log(\"Setting volume on the '\"+this.name+\"' to \" + level);\n\n    this.client.callService(this.domain, 'volume_set', service_data, function(data){\n      if (data) {\n        that.log(\"Successfully set volume on the '\"+that.name+\"' to \" + level);\n        callback()\n      }else{\n        callback(communicationError)\n      }\n    }.bind(this))\n  },\n  getServices: function() {\n    var lightbulbService = new Service.Lightbulb();\n    var informationService = new Service.AccessoryInformation();\n\n    informationService\n      .setCharacteristic(Characteristic.Manufacturer, \"Home Assistant\")\n      .setCharacteristic(Characteristic.Model, \"Media Player\")\n      .setCharacteristic(Characteristic.SerialNumber, \"xxx\");\n\n    lightbulbService\n      .getCharacteristic(Characteristic.On)\n      .on('get', this.getPowerState.bind(this))\n      .on('set', this.setPowerState.bind(this));\n\n\n    if (this.supportsVolume) {\n      lightbulbService\n        .addCharacteristic(Characteristic.Brightness)\n        .on('get', this.getVolume.bind(this))\n        .on('set', this.setVolume.bind(this));\n    }\n\n    return [informationService, lightbulbService];\n  }\n\n}\n\n\nfunction HomeAssistantSwitch(log, data, client, type) {\n  // device info\n  this.domain = type || \"switch\"\n  this.data = data\n  this.entity_id = data.entity_id\n  if (data.attributes && data.attributes.friendly_name) {\n    this.name = data.attributes.friendly_name\n  }else{\n    this.name = data.entity_id.split('.').pop().replace(/_/g, ' ')\n  }\n\n  this.client = client\n  this.log = log;\n}\n\nHomeAssistantSwitch.prototype = {\n  getPowerState: function(callback){\n    this.log(\"fetching power state for: \" + this.name);\n\n    this.client.fetchState(this.entity_id, function(data){\n      if (data) {\n        powerState = data.state == 'on'\n        callback(null, powerState)\n      }else{\n        callback(communicationError)\n      }\n    }.bind(this))\n  },\n  setPowerState: function(powerOn, callback) {\n    var that = this;\n    var service_data = {}\n    service_data.entity_id = this.entity_id\n\n    if (powerOn) {\n      this.log(\"Setting power state on the '\"+this.name+\"' to on\");\n\n      this.client.callService(this.domain, 'turn_on', service_data, function(data){\n        if (data) {\n          that.log(\"Successfully set power state on the '\"+that.name+\"' to on\");\n          callback()\n        }else{\n          callback(communicationError)\n        }\n      }.bind(this))\n    }else{\n      this.log(\"Setting power state on the '\"+this.name+\"' to off\");\n\n      this.client.callService(this.domain, 'turn_off', service_data, function(data){\n        if (data) {\n          that.log(\"Successfully set power state on the '\"+that.name+\"' to off\");\n          callback()\n        }else{\n          callback(communicationError)\n        }\n      }.bind(this))\n    }\n  },\n  getServices: function() {\n    var switchService = new Service.Switch();\n    var informationService = new Service.AccessoryInformation();\n    var model;\n\n    switch (this.domain) {\n      case \"scene\":\n        model = \"Scene\"\n        break;\n      default:\n        model = \"Switch\"\n    }\n\n    informationService\n      .setCharacteristic(Characteristic.Manufacturer, \"Home Assistant\")\n      .setCharacteristic(Characteristic.Model, model)\n      .setCharacteristic(Characteristic.SerialNumber, \"xxx\");\n\n    if (this.domain == 'switch') {\n      switchService\n        .getCharacteristic(Characteristic.On)\n        .on('get', this.getPowerState.bind(this))\n        .on('set', this.setPowerState.bind(this));\n\n    }else{\n      switchService\n        .getCharacteristic(Characteristic.On)\n        .on('set', this.setPowerState.bind(this));\n    }\n\n    return [informationService, switchService];\n  }\n\n}\n\nmodule.exports.accessory = HomeAssistantLight;\nmodule.exports.accessory = HomeAssistantMediaPlayer;\nmodule.exports.accessory = HomeAssistantSwitch;\nmodule.exports.platform = HomeAssistantPlatform;\n","/home/travis/build/npmtest/node-npmtest-homebridge-legacy-plugins/node_modules/homebridge-legacy-plugins/platforms/HomeSeer.js":"'use strict';\n\n//\n// HomeSeer Platform Shim for HomeBridge by Jean-Michel Joudrier - (stipus at stipus dot com)\n// V0.1 - 2015/10/07\n// - Initial version\n// V0.2 - 2015/10/10\n// - Occupancy sensor fix\n// V0.3 - 2015/10/11\n// - Added TemperatureUnit=F|C option to temperature sensors\n// - Added negative temperature support to temperature sensors\n// V0.4 - 2015/10/12\n// - Added thermostat support\n// V0.5 - 2015/10/12\n// - Added Humidity sensor support\n// V0.6 - 2015/10/12\n// - Added Battery support\n// - Added low battery support for all sensors\n// - Added HomeSeer event support (using HomeKit switches...)\n// V0.7 - 2015/10/13\n// - You can add multiple HomeKit devices for the same HomeSeer device reference\n// - Added CarbonMonoxide sensor\n// - Added CarbonDioxide sensor\n// - Added onValues option to all binary sensors\n// V0.8 - 2015/10/14\n// - Added uuid_base parameter to all accessories\n// V0.9 - 2015/10/16\n// - Smoke sensor battery fix\n// - Added offEventGroup && offEventName to events (turn <event> on launches one HS event. turn <event> off can launch another HS event)\n// - Added GarageDoorOpener support\n// - Added Lock support\n// V0.10 - 2015/10/29\n// - Added Security System support\n// - Added Window support\n// - Added Window Covering support\n// - Added obstruction support to doors, windows, and windowCoverings\n//\n//\n// Remember to add platform to config.json. \n//\n// You can get HomeSeer Device References by clicking a HomeSeer device name, then \n// choosing the Advanced Tab.\n//\n// The uuid_base parameter is valid for all events and accessories. \n// If you set this parameter to some unique identifier, the HomeKit accessory ID will be based on uuid_base instead of the accessory name.\n// It is then easier to change the accessory name without messing the HomeKit database.\n// \n//\n// Example:\n// \"platforms\": [\n//     {\n//         \"platform\": \"HomeSeer\",              // Required\n//         \"name\": \"HomeSeer\",                  // Required\n//         \"host\": \"http://192.168.3.4:81\",     // Required - If you did setup HomeSeer authentication, use \"http://user:password@ip_address:port\"\n//\n//         \"events\":[                           // Optional - List of Events - Currently they are imported into HomeKit as switches\n//            {\n//               \"eventGroup\":\"My Group\",       // Required - The HomeSeer event group\n//               \"eventName\":\"My On Event\",     // Required - The HomeSeer event name\n//               \"offEventGroup\":\"My Group\",    // Optional - The HomeSeer event group for turn-off <event>\n//               \"offEventName\":\"My Off Event\", // Optional - The HomeSeer event name for turn-off <event>\n//               \"name\":\"Test\",                 // Optional - HomeSeer event name is the default\n//               \"uuid_base\":\"SomeUniqueId\"     // Optional - HomeKit identifier will be derived from this parameter instead of the name\n//            }\n//         ],\n//\n//         \"accessories\":[                      // Required - List of Accessories\n//            {\n//              \"ref\":8,                        // Required - HomeSeer Device Reference (To get it, select the HS Device - then Advanced Tab) \n//              \"type\":\"Lightbulb\",             // Optional - Lightbulb is the default\n//              \"name\":\"My Light\",              // Optional - HomeSeer device name is the default\n//              \"offValue\":\"0\",                 // Optional - 0 is the default\n//              \"onValue\":\"100\",                // Optional - 100 is the default\n//              \"can_dim\":true,                 // Optional - true is the default - false for a non dimmable lightbulb\n//              \"uuid_base\":\"SomeUniqueId2\"     // Optional - HomeKit identifier will be derived from this parameter instead of the name. You SHOULD add this parameter to all accessories !\n//            },\n//            {\n//              \"ref\":9                         // This is a dimmable Lightbulb by default\n//            },\n//            {\n//              \"ref\":58,                       // This is a controllable outlet\n//              \"type\":\"Outlet\"\n//            },\n//            {\n//              \"ref\":111,                      // Required - HomeSeer Device Reference for your sensor\n//              \"type\":\"TemperatureSensor\",     // Required for a temperature sensor\n//              \"temperatureUnit\":\"F\",          // Optional - C is the default\n//              \"name\":\"Bedroom temp\",          // Optional - HomeSeer device name is the default\n//              \"batteryRef\":112,               // Optional - HomeSeer device reference for the sensor battery level\n//              \"batteryThreshold\":15           // Optional - If sensor battery level is below this value, the HomeKit LowBattery characteristic is set to 1. Default is 10\n//            },\n//            {\n//              \"ref\":34,                       // Required - HomeSeer Device Reference for your sensor\n//              \"type\":\"SmokeSensor\",           // Required for a smoke sensor\n//              \"name\":\"Kichen smoke detector\", // Optional - HomeSeer device name is the default\n//              \"batteryRef\":35,                // Optional - HomeSeer device reference for the sensor battery level\n//              \"batteryThreshold\":15,          // Optional - If sensor battery level is below this value, the HomeKit LowBattery characteristic is set to 1. Default is 10\n//              \"onValues\":[1,1.255]            // Optional - List of all HomeSeer values triggering a \"ON\" sensor state - Default is any value different than 0\n//            },\n//            {\n//              \"ref\":34,                       // Required - HomeSeer Device Reference for your sensor (Here it's the same device as the SmokeSensor above)\n//              \"type\":\"CarbonMonoxideSensor\",  // Required for a carbon monoxide sensor\n//              \"name\":\"Kichen CO detector\",    // Optional - HomeSeer device name is the default\n//              \"batteryRef\":35,                // Optional - HomeSeer device reference for the sensor battery level\n//              \"batteryThreshold\":15,          // Optional - If sensor battery level is below this value, the HomeKit LowBattery characteristic is set to 1. Default is 10\n//              \"onValues\":[2,2.255]            // Optional - List of all HomeSeer values triggering a \"ON\" sensor state - Default is any value different than 0\n//            },\n//            {\n//              \"ref\":113,                      // Required - HomeSeer Device Reference of the Current Temperature Device\n//              \"type\":\"Thermostat\",            // Required for a Thermostat\n//              \"name\":\"Température Salon\",     // Optional - HomeSeer device name is the default\n//              \"temperatureUnit\":\"C\",          // Optional - F for Fahrenheit, C for Celsius, C is the default\n//              \"setPointRef\":167,              // Required - HomeSeer device reference for your thermostat Set Point.\n//              \"setPointReadOnly\":true,        // Optional - Set to false if your SetPoint is read/write. true is the default\n//              \"stateRef\":166,                 // Required - HomeSeer device reference for your thermostat current state\n//              \"stateOffValues\":[0,4,5],       // Required - List of the HomeSeer device values for a HomeKit state=OFF\n//              \"stateHeatValues\":[1],          // Required - List of the HomeSeer device values for a HomeKit state=HEAT\n//              \"stateCoolValues\":[2],          // Required - List of the HomeSeer device values for a HomeKit state=COOL\n//              \"stateAutoValues\":[3],          // Required - List of the HomeSeer device values for a HomeKit state=AUTO\n//              \"controlRef\":168,               // Required - HomeSeer device reference for your thermostat mode control (It can be the same as stateRef for some thermostats)\n//              \"controlOffValue\":0,            // Required - HomeSeer device control value for OFF\n//              \"controlHeatValue\":1,           // Required - HomeSeer device control value for HEAT\n//              \"controlCoolValue\":2,           // Required - HomeSeer device control value for COOL\n//              \"controlAutoValue\":3,           // Required - HomeSeer device control value for AUTO\n//              \"coolingThresholdRef\":169,      // Optional - Not-implemented-yet - HomeSeer device reference for your thermostat cooling threshold\n//              \"heatingThresholdRef\":170       // Optional - Not-implemented-yet - HomeSeer device reference for your thermostat heating threshold               \n//            },\n//            {\n//              \"ref\":200,                      // Required - HomeSeer Device Reference of a garage door opener\n//              \"type\":\"GarageDoorOpener\",      // Required for a Garage Door Opener\n//              \"name\":\"Garage Door\",           // Optional - HomeSeer device name is the default\n//              \"stateRef\":201,                 // Required - HomeSeer device reference for your garage door opener current state (can be the same as ref)\n//              \"stateOpenValues\":[0],          // Required - List of the HomeSeer device values for a HomeKit state=OPEN\n//              \"stateClosedValues\":[1],        // Required - List of the HomeSeer device values for a HomeKit state=CLOSED\n//              \"stateOpeningValues\":[2],       // Optional - List of the HomeSeer device values for a HomeKit state=OPENING\n//              \"stateClosingValues\":[3],       // Optional - List of the HomeSeer device values for a HomeKit state=CLOSING\n//              \"stateStoppedValues\":[4],       // Optional - List of the HomeSeer device values for a HomeKit state=STOPPED\n//              \"controlRef\":201,               // Required - HomeSeer device reference for your garage door opener control (can be the same as ref and stateRef)\n//              \"controlOpenValue\":0,           // Required - HomeSeer device control value for OPEN\n//              \"controlCloseValue\":1,          // Required - HomeSeer device control value for CLOSE\n//              \"obstructionRef\":201,           // Optional - HomeSeer device reference for your garage door opener obstruction state (can be the same as ref)\n//              \"obstructionValues\":[5],        // Optional - List of the HomeSeer device values for a HomeKit obstruction state=OBSTRUCTION\n//              \"lockRef\":202,                  // Optional - HomeSeer device reference for your garage door lock (can be the same as ref)\n//              \"lockUnsecuredValues\":[0],      // Optional - List of the HomeSeer device values for a HomeKit lock state=UNSECURED\n//              \"lockSecuredValues\":[1],        // Optional - List of the HomeSeer device values for a HomeKit lock state=SECURED\n//              \"lockJammedValues\":[2],         // Optional - List of the HomeSeer device values for a HomeKit lock state=JAMMED\n//              \"unlockValue\":0,                // Optional - HomeSeer device control value to unlock the garage door opener\n//              \"lockValue\":1                   // Optional - HomeSeer device control value to lock the garage door opener\n//            },\n//            {\n//              \"ref\":210,                      // Required - HomeSeer Device Reference of a Lock\n//              \"type\":\"Lock\",                  // Required for a Lock\n//              \"name\":\"Main Door Lock\",        // Optional - HomeSeer device name is the default\n//              \"lockUnsecuredValues\":[0],      // Required - List of the HomeSeer device values for a HomeKit lock state=UNSECURED\n//              \"lockSecuredValues\":[1],        // Required - List of the HomeSeer device values for a HomeKit lock state=SECURED\n//              \"lockJammedValues\":[2],         // Optional - List of the HomeSeer device values for a HomeKit lock state=JAMMED\n//              \"unlockValue\":0,                // Required - HomeSeer device control value to unlock\n//              \"lockValue\":1                   // Required - HomeSeer device control value to lock\n//            },\n//            {\n//              \"ref\":230,                      // Required - HomeSeer Device Reference of a Security System\n//              \"type\":\"SecuritySystem\",        // Required for a security system\n//              \"name\":\"Home alarm\",            // Optional - HomeSeer device name is the default\n//              \"armedStayValues\":[0],          // Optional - List of the HomeSeer device values for a HomeKit security state=ARMED-STAY\n//              \"armedAwayValues\":[1],          // Optional - List of the HomeSeer device values for a HomeKit security state=ARMED-AWAY\n//              \"armedNightValues\":[2],         // Optional - List of the HomeSeer device values for a HomeKit security state=ARMED-NIGHT\n//              \"disarmedValues\":[3],           // Optional - List of the HomeSeer device values for a HomeKit security state=DISARMED\n//              \"alarmValues\":[4],              // Optional - List of the HomeSeer device values for a HomeKit security state=ALARM\n//              \"armStayValue\":0,               // Required - HomeSeer device control value to arm in stay mode. If you don't have this mode, select any value that arms your system\n//              \"armAwayValue\":1,               // Required - HomeSeer device control value to arm in away mode. If you don't have this mode, select any value that arms your system\n//              \"armNightValue\":2,              // Required - HomeSeer device control value to arm in night mode. If you don't have this mode, select any value that arms your system\n//              \"disarmValue\":3                 // Required - HomeSeer device control value to disarm security system\n//            },\n//            {\n//              \"ref\":115,                      // Required - HomeSeer Device Reference for a device holding battery level (0-100)\n//              \"type\":\"Battery\",               // Required for a Battery\n//              \"name\":\"Roomba battery\",        // Optional - HomeSeer device name is the default\n//              \"batteryThreshold\":15           // Optional - If the level is below this value, the HomeKit LowBattery characteristic is set to 1. Default is 10\n//            },\n//            {\n//              \"ref\":240,                      // Required - HomeSeer Device Reference for a door - HomeSeer values must go from 0 (closed) to 100 (open)\n//              \"type\":\"Door\",                  // Required for a Door\n//              \"name\":\"Main door\",             // Optional - HomeSeer device name is the default\n//              \"obstructionRef\":241,           // Optional - HomeSeer device reference for your door obstruction state (can be the same as ref)\n//              \"obstructionValues\":[1]         // Optional - List of the HomeSeer device values for a HomeKit obstruction state=OBSTRUCTION\n//            }\n//         ]\n//     }\n// ],\n//\n//\n// SUPORTED TYPES:\n// - Lightbulb              (can_dim, onValue, offValue options)\n// - Fan                    (onValue, offValue options)\n// - Switch                 (onValue, offValue options)\n// - Outlet                 (onValue, offValue options)\n// - Thermostat             (temperatureUnit, setPoint, state, control options)\n// - TemperatureSensor      (temperatureUnit=C|F)\n// - HumiditySensor         (HomeSeer device value in %  - batteryRef, batteryThreshold options)\n// - LightSensor            (HomeSeer device value in Lux  - batteryRef, batteryThreshold options)\n// - ContactSensor          (onValues, batteryRef, batteryThreshold options)\n// - MotionSensor           (onValues, batteryRef, batteryThreshold options)\n// - LeakSensor             (onValues, batteryRef, batteryThreshold options)\n// - OccupancySensor        (onValues, batteryRef, batteryThreshold options)\n// - SmokeSensor            (onValues, batteryRef, batteryThreshold options)\n// - CarbonMonoxideSensor   (onValues, batteryRef, batteryThreshold options)\n// - CarbonDioxideSensor    (onValues, batteryRef, batteryThreshold options)\n// - Battery                (batteryThreshold option)\n// - GarageDoorOpener       (state, control, obstruction, lock options)\n// - Lock                   (unsecured, secured, jammed options)\n// - SecuritySystem         (arm, disarm options)\n// - Door                   (obstruction option)\n// - Window                 (obstruction option)\n// - WindowCovering         (obstruction option)\n\nvar Service = require(\"../api\").homebridge.hap.Service;\nvar Characteristic = require(\"../api\").homebridge.hap.Characteristic;\nvar request = require(\"request\");\n\n\nfunction httpRequest(url, method, callback) {\n    request({\n      url: url,\n      method: method\n    },\n    function (error, response, body) {\n      callback(error, response, body)\n    })\n}\n\n\n\nfunction HomeSeerPlatform(log, config){\n    this.log = log;\n    this.config = config;\n}\n\nHomeSeerPlatform.prototype = {\n    accessories: function(callback) {\n        var that = this;\n        var foundAccessories = [];\n\n        if( this.config.events ) {\n            this.log(\"Creating HomeSeer events.\");\n            for( var i=0; i<this.config.events.length; i++ ) {\n                var event = new HomeSeerEvent( that.log, that.config, that.config.events[i] );\n                foundAccessories.push( event );\n            }\n        }\n\n        this.log(\"Fetching HomeSeer devices.\");\n        var refList = \"\";\n        for( var i=0; i<this.config.accessories.length; i++ ) {\n            refList = refList + this.config.accessories[i].ref;\n            if( i < this.config.accessories.length - 1 )\n                refList = refList + \",\";\n        }\n        var url = this.config[\"host\"] + \"/JSON?request=getstatus&ref=\" + refList;\n        httpRequest( url, \"GET\", function(error, response, body) {\n            if (error) {\n                this.log('HomeSeer status function failed: %s', error.message);\n                callback( foundAccessories );\n            }\n            else {\n                this.log('HomeSeer status function succeeded!');\n                var response = JSON.parse( body );\n                for( var i=0; i<this.config.accessories.length; i++ ) {\n                    for( var j=0; j<response.Devices.length; j++ ) {\n                        if( this.config.accessories[i].ref == response.Devices[j].ref ) {\n                            var accessory = new HomeSeerAccessory( that.log, that.config, this.config.accessories[i], response.Devices[j] );\n                            foundAccessories.push( accessory );\n                            break;\n                        }\n                    }\n                }\n                callback( foundAccessories );\n            }\n        }.bind(this));\n    }\n}\n\nfunction HomeSeerAccessory(log, platformConfig, accessoryConfig, status ) {\n    this.log = log;\n    this.config = accessoryConfig;\n    this.ref = status.ref;\n    this.name = status.name\n    this.model = status.device_type_string;\n    this.onValue = 100;\n    this.offValue = 0;\n\n    this.access_url = platformConfig[\"host\"] + \"/JSON?\";\n    this.control_url = this.access_url + \"request=controldevicebyvalue&ref=\" + this.ref + \"&value=\";\n    this.status_url = this.access_url + \"request=getstatus&ref=\" + this.ref;\n\n    if( this.config.name )\n        this.name = this.config.name;\n\n    if( this.config.uuid_base )\n        this.uuid_base = this.config.uuid_base;\n\n    if( this.config.onValue )\n        this.onValue = this.config.onValue;\n\n    if( this.config.offValue )\n        this.offValue = this.config.offValue;\n}\n\nHomeSeerAccessory.prototype = {\n\n    identify: function(callback) {\n            callback();\n    },\n\n    setPowerState: function(powerOn, callback) {\n        var url;\n\n        if (powerOn) {\n            url = this.control_url + this.onValue;\n            this.log(\"Setting power state to on\");\n        }\n        else {\n            url = this.control_url + this.offValue;\n            this.log(\"Setting power state to off\");\n        }\n\n        httpRequest(url, 'GET', function(error, response, body) {\n            if (error) {\n                this.log('HomeSeer power function failed: %s', error.message);\n                callback(error);\n            }\n            else {\n                this.log('HomeSeer power function succeeded!');\n                callback();\n            }\n        }.bind(this));\n    },\n\n    getPowerState: function(callback) {\n        var url = this.status_url;\n\n        httpRequest(url, 'GET', function(error, response, body) {\n            if (error) {\n                this.log('HomeSeer get power function failed: %s', error.message);\n                callback( error, 0 );\n            }\n            else {\n                var status = JSON.parse( body );\n                var value = status.Devices[0].value;\n\t\n                this.log('HomeSeer get power function succeeded: value=' + value );\n                if( value == 0 )\n                    callback( null, 0 );\n                else\n                    callback( null, 1 );\n            }\n        }.bind(this));\n    },\n\n    getBinarySensorState: function(callback) {\n        var url = this.status_url;\n\n        httpRequest(url, 'GET', function(error, response, body) {\n            if (error) {\n                this.log('HomeSeer get binary sensor state function failed: %s', error.message);\n                callback( error, 0 );\n            }\n            else {\n                var status = JSON.parse( body );\n                var value = status.Devices[0].value;\n\t\n                this.log('HomeSeer get binary sensor state function succeeded: value=' + value );\n                if( this.config.onValues ) {\n                    if( this.config.onValues.indexOf(value) != -1 )\n                        callback( null, 1 );\n                    else\n                        callback( null, 0 );                    \n                }\n                else {\n                    if( value != 0 )\n                        callback( null, 1 );\n                    else\n                        callback( null, 0 );\n                }        \n            }\n        }.bind(this));\n    },\n\n\n    setValue: function(level, callback) {\n        var url = this.control_url + level;\n\n        this.log(\"Setting value to %s\", level);\n\n        httpRequest(url, 'GET', function(error, response, body) {\n            if (error) {\n                this.log('HomeSeer set value function failed: %s', error.message);\n                callback(error);\n            }\n            else {\n                this.log('HomeSeer set value function succeeded!');\n                callback();\n            }\n        }.bind(this));\n    },\n\n    getValue: function(callback) {\n        var url = this.status_url;\n\n        httpRequest(url, 'GET', function(error, response, body) {\n            if (error) {\n                this.log('HomeSeer get value function failed: %s', error.message);\n                callback( error, 0 );\n            }\n            else {\n                var status = JSON.parse( body );\n                var value = status.Devices[0].value;\n\t\n                this.log('HomeSeer get value function succeeded: value=' + value );\n                callback( null, value );\n            }\n        }.bind(this));\n    },\n\n    setTemperature: function(temperature, callback) {\n        this.log(\"Setting temperature to %s\", temperature);\n        if( this.config.temperatureUnit == \"F\" ) {\n            temperature = temperature*9/5+32;\n        }\n\n        var url = this.control_url + temperature;\n        httpRequest(url, 'GET', function(error, response, body) {\n            if (error) {\n                this.log('HomeSeer set temperature function failed: %s', error.message);\n                callback(error);\n            }\n            else {\n                this.log('HomeSeer set temperature function succeeded!');\n                callback();\n            }\n        }.bind(this));\n    },\n\n    getTemperature: function(callback) {\n        var url = this.status_url;\n\n        httpRequest(url, 'GET', function(error, response, body) {\n            if (error) {\n                this.log('HomeSeer get temperature function failed: %s', error.message);\n                callback( error, 0 );\n            }\n            else {\n                var status = JSON.parse( body );\n                var value = status.Devices[0].value;\n\t\n                this.log('HomeSeer get temperature function succeeded: value=' + value );\n                if( this.config.temperatureUnit == \"F\" ) {\n                    value = (value-32)*5/9;\n                }\n                callback( null, value );\n            }\n        }.bind(this));\n    },\n\n    getThermostatCurrentHeatingCoolingState: function(callback) {\n        var ref = this.config.stateRef;\n        var url = this.access_url + \"request=getstatus&ref=\" + ref;\n\n        httpRequest(url, 'GET', function(error, response, body) {\n            if (error) {\n                this.log('HomeSeer get thermostat current heating cooling state function failed: %s', error.message);\n                callback( error, 0 );\n            }\n            else {\n                var status = JSON.parse( body );\n                var value = status.Devices[0].value;\n\t\n                this.log('HomeSeer get thermostat current heating cooling state function succeeded: value=' + value );\n                if( this.config.stateOffValues.indexOf(value) != -1 )\n                    callback( null, 0 );\n                else if( this.config.stateHeatValues.indexOf(value) != -1 )\n                    callback( null, 1 );\n                else if( this.config.stateCoolValues.indexOf(value) != -1 )\n                    callback( null, 2 );\n                else if( this.config.stateAutoValues.indexOf(value) != -1 )\n                    callback( null, 3 );\n                else {\n                    this.log( \"Error: value for thermostat current heating cooling state not in offValues, heatValues, coolValues or autoValues\" );\n                    callback( null, 0 );                \n                }\n            }\n        }.bind(this));\n    },\n\n    setThermostatCurrentHeatingCoolingState: function(state, callback) {\n        this.log(\"Setting thermostat current heating cooling state to %s\", state);\n\n        var ref = this.config.controlRef;\n        var value = 0;\n        if( state == 0 )\n            value = this.config.controlOffValue;\n        else if( state == 1 )\n            value = this.config.controlHeatValue;\n        else if( state == 2 )\n            value = this.config.controlCoolValue;\n        else if( state == 3 )\n            value = this.config.controlAutoValue;\n\n        var url = this.access_url + \"request=controldevicebyvalue&ref=\" + ref + \"&value=\" + value;\n        httpRequest(url, 'GET', function(error, response, body) {\n            if (error) {\n                this.log('HomeSeer set thermostat current heating cooling state function failed: %s', error.message);\n                callback(error);\n            }\n            else {\n                this.log('HomeSeer set thermostat current heating cooling state function succeeded!');\n                callback();\n            }\n        }.bind(this));\n    },\n\n    getThermostatTargetTemperature: function(callback) {\n        var ref = this.config.setPointRef;\n        var url = this.access_url + \"request=getstatus&ref=\" + ref;\n\n        httpRequest(url, 'GET', function(error, response, body) {\n            if (error) {\n                this.log('HomeSeer get thermostat target temperature function failed: %s', error.message);\n                callback( error, 0 );\n            }\n            else {\n                var status = JSON.parse( body );\n                var value = status.Devices[0].value;\n\t\n                this.log('HomeSeer get thermostat target temperature function succeeded: value=' + value );\n                if( this.config.temperatureUnit == \"F\" ) {\n                    value = (value-32)*5/9;\n                }\n                callback( null, value );\n            }\n        }.bind(this));\n    },\n\n    setThermostatTargetTemperature: function(temperature, callback) {\n        this.log(\"Setting thermostat target temperature to %s\", temperature);\n        if( this.config.temperatureUnit == \"F\" ) {\n            temperature = temperature*9/5+32;\n        }\n\n        var ref = this.config.setPointRef;\n        var url = this.access_url + \"request=controldevicebyvalue&ref=\" + ref + \"&value=\" + temperature;\n        httpRequest(url, 'GET', function(error, response, body) {\n            if (error) {\n                this.log('HomeSeer set thermostat target temperature function failed: %s', error.message);\n                callback(error);\n            }\n            else {\n                this.log('HomeSeer set thermostat target temperature function succeeded!');\n                callback();\n            }\n        }.bind(this));\n    },\n\n    getThermostatTemperatureDisplayUnits: function(callback) {\n        if( this.config.temperatureUnit == \"F\" )\n            callback( null, 1 );\n        else\n            callback( null, 0 );\n    },\n\n    getLowBatteryStatus: function(callback) {\n        var ref = this.config.batteryRef;\n        var url = this.access_url + \"request=getstatus&ref=\" + ref;\n\n        httpRequest(url, 'GET', function(error, response, body) {\n            if (error) {\n                this.log('HomeSeer get battery status function failed: %s', error.message);\n                callback( error, 0 );\n            }\n            else {\n                var status = JSON.parse( body );\n                var value = status.Devices[0].value;\n                var minValue = 10;\t\n\n                this.log('HomeSeer get battery status function succeeded: value=' + value );\n                if( this.config.batteryThreshold ) {\n                    \tminValue = this.config.batteryThreshold;\n                }\n\n                if( value > minValue )\n                    callback( null, 0 );\n                else\n                    callback( null, 1 );\n            }\n        }.bind(this));\n    },\n\n    getCurrentDoorState: function(callback) {\n        var ref = this.config.stateRef;\n        var url = this.access_url + \"request=getstatus&ref=\" + ref;\n\n        httpRequest(url, 'GET', function(error, response, body) {\n            if (error) {\n                this.log('HomeSeer get current door state function failed: %s', error.message);\n                callback( error, 0 );\n            }\n            else {\n                var status = JSON.parse( body );\n                var value = status.Devices[0].value;\n\t\n                this.log('HomeSeer get target door state function succeeded: value=' + value );\n                if( this.config.stateOpenValues.indexOf(value) != -1 )\n                    callback( null, 0 );\n                else if( this.config.stateClosedValues.indexOf(value) != -1 )\n                    callback( null, 1 );\n                else if( this.config.stateOpeningValues && this.config.stateOpeningValues.indexOf(value) != -1 )\n                    callback( null, 2 );\n                else if( this.config.stateClosingValues && this.config.stateClosingValues.indexOf(value) != -1 )\n                    callback( null, 3 );\n                else if( this.config.stateStoppedValues && this.config.stateStoppedValues.indexOf(value) != -1 )\n                    callback( null, 4 );\n                else {\n                    this.log( \"Error: value for current door state not in stateO0penValues, stateClosedValues, stateOpeningValues, stateClosingValues, stateStoppedValues\" );\n                    callback( null, 0 );                \n                }\n            }\n        }.bind(this));\n    },\n\n    setTargetDoorState: function(state, callback) {\n        this.log(\"Setting target door state state to %s\", state);\n\n        var ref = this.config.controlRef;\n        var value = 0;\n        if( state == 0 )\n            value = this.config.controlOpenValue;\n        else if( state == 1 )\n            value = this.config.controlCloseValue;\n\n        var url = this.access_url + \"request=controldevicebyvalue&ref=\" + ref + \"&value=\" + value;\n        httpRequest(url, 'GET', function(error, response, body) {\n            if (error) {\n                this.log('HomeSeer set target door state function failed: %s', error.message);\n                callback(error);\n            }\n            else {\n                this.log('HomeSeer set target door state function succeeded!');\n                callback();\n            }\n        }.bind(this));\n    },\n\n    getObstructionDetected: function(callback) {\n        if( this.config.obstructionRef ) {\n            var ref = this.config.obstructionRef;\n            var url = this.access_url + \"request=getstatus&ref=\" + ref;\n\n            httpRequest(url, 'GET', function(error, response, body) {\n                if (error) {\n                    this.log('HomeSeer get obstruction detected function failed: %s', error.message);\n                    callback( error, 0 );\n                }\n                else {\n                    var status = JSON.parse( body );\n                    var value = status.Devices[0].value;\n\t\n                    this.log('HomeSeer get obstruction detected function succeeded: value=' + value );\n                    if( this.config.obstructionValues && this.config.obstructionValues.indexOf(value) != -1 )\n                        callback( null, 1 );\n                    else {\n                        callback( null, 0 );                \n                    }\n                }\n            }.bind(this));\n        }\n        else {       \n            callback( null, 0 );                \n        }\n    },\n\n    getLockCurrentState: function(callback) {\n        var ref = this.config.lockRef;\n        var url = this.access_url + \"request=getstatus&ref=\" + ref;\n\n        httpRequest(url, 'GET', function(error, response, body) {\n            if (error) {\n                this.log('HomeSeer get lock current state function failed: %s', error.message);\n                callback( error, 3 );\n            }\n            else {\n                var status = JSON.parse( body );\n                var value = status.Devices[0].value;\n\t\n                this.log('HomeSeer get lock current state function succeeded: value=' + value );\n                if( this.config.lockUnsecuredValues && this.config.lockUnsecuredValues.indexOf(value) != -1 )\n                    callback( null, 0 );\n                else if( this.config.lockSecuredValues && this.config.lockSecuredValues.indexOf(value) != -1 )\n                    callback( null, 1 );\n                else if( this.config.lockJammedValues && this.config.lockJammedValues.indexOf(value) != -1 )\n                    callback( null, 2 );\n                else {\n                    callback( null, 3 );                \n                }\n            }\n        }.bind(this));\n    },\n\n    setLockTargetState: function(state, callback) {\n        this.log(\"Setting target lock state to %s\", state);\n\n        var ref = this.config.lockRef;\n        var value = 0;\n        if( state == 0 && this.config.unlockValue )\n            value = this.config.unlockValue;\n        else if( state == 1 && this.config.lockValue )\n            value = this.config.lockValue;\n\n        var url = this.access_url + \"request=controldevicebyvalue&ref=\" + ref + \"&value=\" + value;\n        httpRequest(url, 'GET', function(error, response, body) {\n            if (error) {\n                this.log('HomeSeer set target lock state function failed: %s', error.message);\n                callback(error);\n            }\n            else {\n                this.log('HomeSeer set target lock state function succeeded!');\n                callback();\n            }\n        }.bind(this));\n    },\n\n    getSecuritySystemCurrentState: function(callback) {\n        var url = this.access_url + \"request=getstatus&ref=\" + this.ref;\n\n        httpRequest(url, 'GET', function(error, response, body) {\n            if (error) {\n                this.log('HomeSeer get security system current state function failed: %s', error.message);\n                callback( error, 3 );\n            }\n            else {\n                var status = JSON.parse( body );\n                var value = status.Devices[0].value;\n\t\n                this.log('HomeSeer get security system current state function succeeded: value=' + value );\n                if( this.config.armedStayValues && this.config.armedStayValues.indexOf(value) != -1 )\n                    callback( null, 0 );\n                else if( this.config.armedAwayValues && this.config.armedAwayValues.indexOf(value) != -1 )\n                    callback( null, 1 );\n                else if( this.config.armedNightValues && this.config.armedNightValues.indexOf(value) != -1 )\n                    callback( null, 2 );\n                else if( this.config.disarmedValues && this.config.disarmedValues.indexOf(value) != -1 )\n                    callback( null, 3 );\n                else if( this.config.alarmValues && this.config.alarmValues.indexOf(value) != -1 )\n                    callback( null, 4 );\n                else\n                    callback( null, 0 );                \n            }\n        }.bind(this));\n    },\n\n    setSecuritySystemTargetState: function(state, callback) {\n        this.log(\"Setting security system state to %s\", state);\n\n        var value = 0;\n        if( state == 0 && this.config.armStayValue )\n            value = this.config.armStayValue;\n        else if( state == 1 && this.config.armAwayValue )\n            value = this.config.armAwayValue;\n        else if( state == 2 && this.config.armNightValue )\n            value = this.config.armNightValue;\n        else if( state == 3 && this.config.disarmValue )\n            value = this.config.disarmValue;\n\n        var url = this.access_url + \"request=controldevicebyvalue&ref=\" + this.ref + \"&value=\" + value;\n        httpRequest(url, 'GET', function(error, response, body) {\n            if (error) {\n                this.log('HomeSeer set target security system state function failed: %s', error.message);\n                callback(error);\n            }\n            else {\n                this.log('HomeSeer set target security system state function succeeded!');\n                callback();\n            }\n        }.bind(this));\n    },\n\n\n    getPositionState: function(callback) {\n        callback( null, 2 );  // Temporarily return STOPPED. TODO: full door support\n    },\n\n    getServices: function() {\n        var services = []\n\n        var informationService = new Service.AccessoryInformation();\n        informationService\n            .setCharacteristic(Characteristic.Manufacturer, \"HomeSeer\")\n            .setCharacteristic(Characteristic.Model, this.model )\n            .setCharacteristic(Characteristic.SerialNumber, \"HS \" + this.config.type + \" ref \" + this.ref);\n        services.push( informationService );\n\n\n        switch( this.config.type ) {\n        case \"Lightbulb\": {\n            var lightbulbService = new Service.Lightbulb();\n            lightbulbService\n                .getCharacteristic(Characteristic.On)\n                .on('set', this.setPowerState.bind(this))\n                .on('get', this.getPowerState.bind(this));\n    \n            if( this.config.can_dim == null || this.config.can_dim == true ) {\n                lightbulbService\n                    .addCharacteristic(new Characteristic.Brightness())\n                    .on('set', this.setValue.bind(this))\n                    .on('get', this.getValue.bind(this));\n            }\n\n            services.push( lightbulbService );\n            break;\n            }\n        case \"Fan\": {\n            var fanService = new Service.Fan();\n            fanService\n                .getCharacteristic(Characteristic.On)\n                .on('set', this.setPowerState.bind(this))\n                .on('get', this.getPowerState.bind(this));\n            services.push( fanService );\n            break;\n            }\n        case \"Switch\": {\n            var switchService = new Service.Switch();\n            switchService\n                .getCharacteristic(Characteristic.On)\n                .on('set', this.setPowerState.bind(this))\n                .on('get', this.getPowerState.bind(this));\n            services.push( switchService );\n            break;\n            }\n        case \"Outlet\": {\n            var outletService = new Service.Outlet();\n            outletService\n                .getCharacteristic(Characteristic.On)\n                .on('set', this.setPowerState.bind(this))\n                .on('get', this.getPowerState.bind(this));\n            services.push( outletService );\n            break;\n            }\n        case \"TemperatureSensor\": {\n            var temperatureSensorService = new Service.TemperatureSensor();\n            temperatureSensorService\n                .getCharacteristic(Characteristic.CurrentTemperature)\n                .on('get', this.getTemperature.bind(this));\n            temperatureSensorService\n                .getCharacteristic(Characteristic.CurrentTemperature).setProps( {minValue: -100} );\n            if( this.config.batteryRef ) {\n                temperatureSensorService\n                    .addCharacteristic(new Characteristic.StatusLowBattery())\n                    .on('get', this.getLowBatteryStatus.bind(this));\n            }\n            services.push( temperatureSensorService );\n            break;\n            }\n        case \"CarbonMonoxideSensor\": {\n            var carbonMonoxideSensorService = new Service.CarbonMonoxideSensor();\n            carbonMonoxideSensorService\n                .getCharacteristic(Characteristic.CarbonMonoxideDetected)\n                .on('get', this.getBinarySensorState.bind(this));\n            if( this.config.batteryRef ) {\n                carbonMonoxideSensorService\n                    .addCharacteristic(new Characteristic.StatusLowBattery())\n                    .on('get', this.getLowBatteryStatus.bind(this));\n            }\n            services.push( carbonMonoxideSensorService );\n            break;\n            }\n        case \"CarbonDioxideSensor\": {\n            var carbonDioxideSensorService = new Service.CarbonDioxideSensor();\n            carbonDioxideSensorService\n                .getCharacteristic(Characteristic.CarbonDioxideDetected)\n                .on('get', this.getBinarySensorState.bind(this));\n            if( this.config.batteryRef ) {\n                carbonDioxideSensorService\n                    .addCharacteristic(new Characteristic.StatusLowBattery())\n                    .on('get', this.getLowBatteryStatus.bind(this));\n            }\n            services.push( carbonDioxideSensorService );\n            break;\n            }\n        case \"ContactSensor\": {\n            var contactSensorService = new Service.ContactSensor();\n            contactSensorService\n                .getCharacteristic(Characteristic.ContactSensorState)\n                .on('get', this.getBinarySensorState.bind(this));\n            if( this.config.batteryRef ) {\n                contactSensorService\n                    .addCharacteristic(new Characteristic.StatusLowBattery())\n                    .on('get', this.getLowBatteryStatus.bind(this));\n            }\n            services.push( contactSensorService );\n            break;\n            }\n        case \"MotionSensor\": {\n            var motionSensorService = new Service.MotionSensor();\n            motionSensorService\n                .getCharacteristic(Characteristic.MotionDetected)\n                .on('get', this.getBinarySensorState.bind(this));\n            if( this.config.batteryRef ) {\n                motionSensorService\n                    .addCharacteristic(new Characteristic.StatusLowBattery())\n                    .on('get', this.getLowBatteryStatus.bind(this));\n            }\n            services.push( motionSensorService );\n            break;\n            }\n        case \"LeakSensor\": {\n            var leakSensorService = new Service.LeakSensor();\n            leakSensorService\n                .getCharacteristic(Characteristic.LeakDetected)\n                .on('get', this.getBinarySensorState.bind(this));\n            if( this.config.batteryRef ) {\n                leakSensorService\n                    .addCharacteristic(new Characteristic.StatusLowBattery())\n                    .on('get', this.getLowBatteryStatus.bind(this));\n            }\n            services.push( leakSensorService );\n            break;\n            }\n        case \"OccupancySensor\": {\n            var occupancySensorService = new Service.OccupancySensor();\n            occupancySensorService\n                .getCharacteristic(Characteristic.OccupancyDetected)\n                .on('get', this.getBinarySensorState.bind(this));\n            if( this.config.batteryRef ) {\n                occupancySensorService\n                    .addCharacteristic(new Characteristic.StatusLowBattery())\n                    .on('get', this.getLowBatteryStatus.bind(this));\n            }\n            services.push( occupancySensorService );\n            break;\n            }\n        case \"SmokeSensor\": {\n            var smokeSensorService = new Service.SmokeSensor();\n            smokeSensorService\n                .getCharacteristic(Characteristic.SmokeDetected)\n                .on('get', this.getBinarySensorState.bind(this));\n            if( this.config.batteryRef ) {\n                smokeSensorService\n                    .addCharacteristic(new Characteristic.StatusLowBattery())\n                    .on('get', this.getLowBatteryStatus.bind(this));\n            }\n            services.push( smokeSensorService );\n            break;\n            }\n        case \"LightSensor\": {\n            var lightSensorService = new Service.LightSensor();\n            lightSensorService\n                .getCharacteristic(Characteristic.CurrentAmbientLightLevel)\n                .on('get', this.getValue.bind(this));\n            if( this.config.batteryRef ) {\n                lightSensorService\n                    .addCharacteristic(new Characteristic.StatusLowBattery())\n                    .on('get', this.getLowBatteryStatus.bind(this));\n            }\n            services.push( lightSensorService );\n            break;\n            }\n        case \"HumiditySensor\": {\n            var humiditySensorService = new Service.HumiditySensor();\n            humiditySensorService\n                .getCharacteristic(Characteristic.CurrentRelativeHumidity)\n                .on('get', this.getValue.bind(this));\n            if( this.config.batteryRef ) {\n                humiditySensorService\n                    .addCharacteristic(new Characteristic.StatusLowBattery())\n                    .on('get', this.getLowBatteryStatus.bind(this));\n            }\n            services.push( humiditySensorService );\n            break;\n            }\n        case \"Door\": {\n            var doorService = new Service.Door();\n            doorService\n                .getCharacteristic(Characteristic.CurrentPosition)\n                .on('get', this.getValue.bind(this));\n            doorService\n                .getCharacteristic(Characteristic.TargetPosition)\n                .on('set', this.setValue.bind(this));\n            doorService\n                .getCharacteristic(Characteristic.PositionState)\n                .on('get', this.getPositionState.bind(this));\n            if( this.config.obstructionRef ) {\n                doorService\n                    .addCharacteristic(new Characteristic.ObstructionDetected())\n                    .on('get', this.getObstructionDetected.bind(this));\n            }\n            services.push( doorService );\n            break;\n            }\n        case \"Window\": {\n            var windowService = new Service.Window();\n            windowService\n                .getCharacteristic(Characteristic.CurrentPosition)\n                .on('get', this.getValue.bind(this));\n            windowService\n                .getCharacteristic(Characteristic.TargetPosition)\n                .on('set', this.setValue.bind(this));\n            windowService\n                .getCharacteristic(Characteristic.PositionState)\n                .on('get', this.getPositionState.bind(this));\n            if( this.config.obstructionRef ) {\n                windowService\n                    .addCharacteristic(new Characteristic.ObstructionDetected())\n                    .on('get', this.getObstructionDetected.bind(this));\n            }\n            services.push( windowService );\n            break;\n            }\n        case \"WindowCovering\": {\n            var windowCoveringService = new Service.WindowCovering();\n            windowCoveringService\n                .getCharacteristic(Characteristic.CurrentPosition)\n                .on('get', this.getValue.bind(this));\n            windowCoveringService\n                .getCharacteristic(Characteristic.TargetPosition)\n                .on('set', this.setValue.bind(this));\n            windowCoveringService\n                .getCharacteristic(Characteristic.PositionState)\n                .on('get', this.getPositionState.bind(this));\n            services.push( windowCoveringService );\n            if( this.config.obstructionRef ) {\n                windowCoveringService\n                    .addCharacteristic(new Characteristic.ObstructionDetected())\n                    .on('get', this.getObstructionDetected.bind(this));\n            }\n            break;\n            }\n        case \"Battery\": {\n            this.config.batteryRef = this.ref;\n            var batteryService = new Service.BatteryService();\n            batteryService\n                .getCharacteristic(Characteristic.BatteryLevel)\n                .on('get', this.getValue.bind(this));\n            batteryService\n                .getCharacteristic(Characteristic.StatusLowBattery)\n                .on('get', this.getLowBatteryStatus.bind(this));\n            services.push( batteryService );\n            break;\n            }\n        case \"Thermostat\": {\n            var thermostatService = new Service.Thermostat();\n            thermostatService\n                .getCharacteristic(Characteristic.CurrentTemperature)\n                .on('get', this.getTemperature.bind(this));\n            thermostatService\n                .getCharacteristic(Characteristic.TargetTemperature)\n                .on('get', this.getThermostatTargetTemperature.bind(this));\n            if( this.config.setPointReadOnly === null || this.config.setPointReadOnly === false )\n                thermostatService\n                    .getCharacteristic(Characteristic.TargetTemperature)\n                    .on('set', this.setThermostatTargetTemperature.bind(this));\n            thermostatService\n                .getCharacteristic(Characteristic.CurrentHeatingCoolingState)\n                .on('get', this.getThermostatCurrentHeatingCoolingState.bind(this));\n            thermostatService\n                .getCharacteristic(Characteristic.TargetHeatingCoolingState)\n                .on('get', this.getThermostatCurrentHeatingCoolingState.bind(this));\n            thermostatService\n                .getCharacteristic(Characteristic.TargetHeatingCoolingState)\n                .on('set', this.setThermostatCurrentHeatingCoolingState.bind(this));\n            thermostatService\n                .getCharacteristic(Characteristic.TemperatureDisplayUnits)\n                .on('get', this.getThermostatTemperatureDisplayUnits.bind(this));\n\n            services.push( thermostatService );\n            break;\n            }\n        case \"GarageDoorOpener\": {\n            var garageDoorOpenerService = new Service.GarageDoorOpener();\n            garageDoorOpenerService\n                .getCharacteristic(Characteristic.CurrentDoorState)\n                .on('get', this.getCurrentDoorState.bind(this));\n            garageDoorOpenerService\n                .getCharacteristic(Characteristic.TargetDoorState)\n                .on('set', this.setTargetDoorState.bind(this));\n            garageDoorOpenerService\n                .getCharacteristic(Characteristic.ObstructionDetected)\n                .on('get', this.getObstructionDetected.bind(this));\n            if( this.config.lockRef ) {\n                garageDoorOpenerService\n                    .addCharacteristic(new Characteristic.LockCurrentState())\n                    .on('get', this.getLockCurrentState.bind(this));\n                garageDoorOpenerService\n                    .addCharacteristic(new Characteristic.LockTargetState())\n                    .on('set', this.setLockTargetState.bind(this));\n            }\n            services.push( garageDoorOpenerService );\n            break;\n            }\n        case \"Lock\": {\n            this.config.lockRef = this.ref;\n            var lockService = new Service.LockMechanism();\n            lockService\n                .getCharacteristic(Characteristic.LockCurrentState)\n                .on('get', this.getLockCurrentState.bind(this));\n            lockService\n                .getCharacteristic(Characteristic.LockTargetState)\n                .on('set', this.setLockTargetState.bind(this));\n            services.push( lockService );\n            break;\n            }\n        case \"SecuritySystem\": {\n            var securitySystemService = new Service.SecuritySystem();\n            securitySystemService\n                .getCharacteristic(Characteristic.SecuritySystemCurrentState)\n                .on('get', this.getSecuritySystemCurrentState.bind(this));\n            securitySystemService\n                .getCharacteristic(Characteristic.SecuritySystemTargetState)\n                .on('set', this.setSecuritySystemTargetState.bind(this));\n            services.push( securitySystemService );\n            break;\n            }\n\n        default:{\n            var lightbulbService = new Service.Lightbulb();\n            lightbulbService\n                .getCharacteristic(Characteristic.On)\n                .on('set', this.setPowerState.bind(this))\n                .on('get', this.getPowerState.bind(this));\n    \n            lightbulbService\n                .addCharacteristic(new Characteristic.Brightness())\n                .on('set', this.setValue.bind(this))\n                .on('get', this.getValue.bind(this));\n\n            services.push( lightbulbService );\n            break;\n            }\n        }\n\n        return services;\n    }\n}\n\nfunction HomeSeerEvent(log, platformConfig, eventConfig ) {\n    this.log = log;\n    this.config = eventConfig;\n    this.name = eventConfig.eventName\n    this.model = \"HomeSeer Event\";\n\n    this.access_url = platformConfig[\"host\"] + \"/JSON?\";\n    this.on_url = this.access_url + \"request=runevent&group=\" + encodeURIComponent(this.config.eventGroup) + \"&name=\" + encodeURIComponent(this.config.eventName);\n\n    if( this.config.offEventGroup && this.config.offEventName ) {\n        this.off_url = this.access_url + \"request=runevent&group=\" + encodeURIComponent(this.config.offEventGroup) + \"&name=\" + encodeURIComponent(this.config.offEventName);\n    }\n\n    if( this.config.name )\n        this.name = this.config.name;\n\n    if( this.config.uuid_base )\n        this.uuid_base = this.config.uuid_base;\n}\n\nHomeSeerEvent.prototype = {\n\n    identify: function(callback) {\n            callback();\n    },\n\n    launchEvent: function(value, callback) {\n        this.log(\"Setting event value to %s\", value);\n\n        var url = this.on_url;\n        if( value == 0 && this.off_url ) {\n            url = this.off_url;\n        }\n\n        httpRequest(url, 'GET', function(error, response, body) {\n            if (error) {\n                this.log('HomeSeer run event function failed: %s', error.message);\n                callback(error);\n            }\n            else {\n                this.log('HomeSeer run event function succeeded!');\n                callback();\n            }\n        }.bind(this));\n    },\n\n\n    getServices: function() {\n        var services = []\n\n        var informationService = new Service.AccessoryInformation();\n        informationService\n            .setCharacteristic(Characteristic.Manufacturer, \"HomeSeer\")\n            .setCharacteristic(Characteristic.Model, this.model )\n            .setCharacteristic(Characteristic.SerialNumber, \"HS Event \" + this.config.eventGroup + \" \" + this.config.eventName);\n        services.push( informationService );\n\n        var switchService = new Service.Switch();\n        switchService\n            .getCharacteristic(Characteristic.On) \n            .on('set', this.launchEvent.bind(this));\n        services.push( switchService );\n\n        return services;\n    }\n}\n\nmodule.exports.platform = HomeSeerPlatform;\n","/home/travis/build/npmtest/node-npmtest-homebridge-legacy-plugins/node_modules/homebridge-legacy-plugins/platforms/ISY.js":"var types = require(\"../api\").homebridge.hapLegacyTypes;\nvar xml2js = require('xml2js');\nvar request = require('request');\nvar util = require('util');\n\nvar parser = new xml2js.Parser();\n\n\nvar power_state_ctype = {\n    cType: types.POWER_STATE_CTYPE,\n    onUpdate: function(value) { return; },\n    perms: [\"pw\",\"pr\",\"ev\"],\n    format: \"bool\",\n    initialValue: 0,\n    supportEvents: true,\n    supportBonjour: false,\n    manfDescription: \"Change the power state\",\n    designedMaxLength: 1\n};\n\nfunction ISYURL(user, pass, host, port, path) {\n    return util.format(\"http://%s:%s@%s:%d%s\", user, pass, host, port, encodeURI(path));\n}\n\nfunction ISYPlatform(log, config) {\n    this.host = config[\"host\"];\n    this.port = config[\"port\"];\n    this.user = config[\"username\"];\n    this.pass = config[\"password\"];\n\n    this.log = log;\n}\n\nISYPlatform.prototype = {\n    accessories: function(callback) {\n        this.log(\"Fetching ISY Devices.\");\n\n        var that = this;\n        var url = ISYURL(this.user, this.pass, this.host, this.port, \"/rest/nodes\");\n\n        var options = {\n            url: url,\n            method: 'GET'\n        };\n\n        var foundAccessories = [];\n\n        request(options, function(error, response, body) {\n            if (error)\n            {\n                console.trace(\"Requesting ISY devices.\");\n                that.log(error);\n                return error;\n            }\n\n            parser.parseString(body, function(err, result) {\n                result.nodes.node.forEach(function(obj) {\n                    var enabled = obj.enabled[0] == 'true';\n\n                    if (enabled)\n                    {\n                        var device = new ISYAccessory(\n                                that.log,\n                                that.host,\n                                that.port,\n                                that.user,\n                                that.pass,\n                                obj.name[0],\n                                obj.address[0],\n                                obj.property[0].$.uom\n                                );\n\n                        foundAccessories.push(device);\n                    }\n                });\n            });\n\n            callback(foundAccessories.sort(function (a,b) {\n                return (a.name > b.name) - (a.name < b.name);\n            }));\n        });\n    }\n}\n\nfunction ISYAccessory(log, host, port, user, pass, name, address, uom) {\n    this.log = log;\n    this.host = host;\n    this.port = port;\n    this.user = user;\n    this.pass = pass;\n    this.name = name;\n    this.address = address;\n    this.uom = uom;\n}\n\nISYAccessory.prototype = {\n    query: function() {\n        var path = util.format(\"/rest/status/%s\", encodeURI(this.address));\n        var url = ISYURL(this.user, this.pass, this.host, this.port, path);\n\n        var options = { url: url, method: 'GET' };\n        request(options, function(error, response, body) {\n            if (error)\n            {\n                console.trace(\"Requesting Device Status.\");\n                that.log(error);\n                return error;\n            }\n\n            parser.parseString(body, function(err, result) {\n                var value = result.properties.property[0].$.value;\n                return value;\n            });\n\n        });\n    },\n\n    command: function(c, value) {\n        this.log(this.name + \" sending command \" + c + \" with value \" + value);\n\n        switch (c)\n        {\n            case 'On':\n                path = \"/rest/nodes/\" + this.address + \"/cmd/DFON\";\n                break;\n            case 'Off':\n                path = \"/rest/nodes/\" + this.address + \"/cmd/DFOF\";\n                break;\n            case 'Low':\n                path = \"/rest/nodes/\" + this.address + \"/cmd/DON/85\";\n                break;\n            case 'Medium':\n                path = \"/rest/nodes/\" + this.address + \"/cmd/DON/128\";\n                break;\n            case 'High':\n                path = \"/rest/nodes/\" + this.address + \"/cmd/DON/255\";\n                break;\n            case 'setLevel':\n                if (value > 0)\n                {\n                    path = \"/rest/nodes/\" + this.address + \"/cmd/DON/\" + Math.floor(255 * (value / 100));\n                }\n                break;\n            default:\n                this.log(\"Unimplemented command sent to \" + this.name + \" Command \" + c);\n                break;\n        }\n\n        if (path)\n        {\n            var url = ISYURL(this.user, this.pass, this.host, this.port, path);\n            var options = {\n                url: url,\n                method: 'GET'\n            };\n\n            var that = this;\n            request(options, function(error, response, body) {\n                if (error)\n                {\n                    console.trace(\"Sending Command.\");\n                    that.log(error);\n                    return error;\n                }\n                that.log(\"Sent command \" + path + \" to \" + that.name);\n            });\n        }\n    },\n\n    informationCharacteristics: function() {\n    return [\n      {\n        cType: types.NAME_CTYPE,\n        onUpdate: null,\n        perms: [\"pr\"],\n        format: \"string\",\n        initialValue: this.name,\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Name of the accessory\",\n        designedMaxLength: 255\n      },{\n        cType: types.MANUFACTURER_CTYPE,\n        onUpdate: null,\n        perms: [\"pr\"],\n        format: \"string\",\n        initialValue: \"SmartHome\",\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Manufacturer\",\n        designedMaxLength: 255\n      },{\n        cType: types.MODEL_CTYPE,\n        onUpdate: null,\n        perms: [\"pr\"],\n        format: \"string\",\n        initialValue: \"Rev-1\",\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Model\",\n        designedMaxLength: 255\n      },{\n        cType: types.SERIAL_NUMBER_CTYPE,\n        onUpdate: null,\n        perms: [\"pr\"],\n        format: \"string\",\n        initialValue: this.address,\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"SN\",\n        designedMaxLength: 255\n      },{\n        cType: types.IDENTIFY_CTYPE,\n        onUpdate: null,\n        perms: [\"pw\"],\n        format: \"bool\",\n        initialValue: false,\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Identify Accessory\",\n        designedMaxLength: 1\n      }\n    ]\n  },\n\n  controlCharacteristics: function(that) {\n    cTypes = [{\n      cType: types.NAME_CTYPE,\n      onUpdate: null,\n      perms: [\"pr\"],\n      format: \"string\",\n      initialValue: this.name,\n      supportEvents: true,\n      supportBonjour: false,\n      manfDescription: \"Name of service\",\n      designedMaxLength: 255\n    }]\n\n    if (this.uom == \"%/on/off\") {\n        cTypes.push({\n            cType: types.POWER_STATE_CTYPE,\n            perms: [\"pw\",\"pr\",\"ev\"],\n            format: \"bool\",\n            initialValue: 0,\n            supportEvents: true,\n            supportBonjour: false,\n            manfDescription: \"Change the power state\",\n            designedMaxLength: 1,\n            onUpdate: function(value) {\n                if (value == 0) {\n                    that.command(\"Off\")\n                } else {\n                    that.command(\"On\")\n                }\n            },\n            onRead: function() {\n                return this.query();\n            }\n        });\n        cTypes.push({\n            cType: types.BRIGHTNESS_CTYPE,\n            perms: [\"pw\",\"pr\",\"ev\"],\n            format: \"int\",\n            initialValue:  0,\n            supportEvents: true,\n            supportBonjour: false,\n            manfDescription: \"Adjust Brightness of Light\",\n            designedMinValue: 0,\n            designedMaxValue: 100,\n            designedMinStep: 1,\n            unit: \"%\",\n            onUpdate: function(value) {\n                that.command(\"setLevel\", value);\n            },\n            onRead: function() {\n                var val = this.query();\n                that.log(\"Query: \" + val);\n                return val;\n            }\n        });\n    }\n    else if (this.uom == \"off/low/med/high\")\n    {\n        cTypes.push({\n            cType: types.POWER_STATE_CTYPE,\n            perms: [\"pw\",\"pr\",\"ev\"],\n            format: \"bool\",\n            initialValue: 0,\n            supportEvents: true,\n            supportBonjour: false,\n            manfDescription: \"Change the power state\",\n            designedMaxLength: 1,\n            onUpdate: function(value) {\n                if (value == 0) {\n                    that.command(\"Off\")\n                } else {\n                    that.command(\"On\")\n                }\n            },\n            onRead: function() {\n                return this.query();\n            }\n        });\n        cTypes.push({\n            cType: types.ROTATION_SPEED_CTYPE,\n            perms: [\"pw\",\"pr\",\"ev\"],\n            format: \"bool\",\n            initialValue: 0,\n            supportEvents: true,\n            supportBonjour: false,\n            manfDescription: \"Change the speed of the fan\",\n            designedMaxLength: 1,\n            onUpdate: function(value) {\n                if (value == 0) {\n                    that.command(\"Off\");\n                } else if (value > 0 && value < 40) {\n                    that.command(\"Low\");\n                } else if (value > 40 && value < 75) {\n                    that.command(\"Medium\");\n                } else {\n                    that.command(\"High\");\n                }\n            },\n            onRead: function() {\n                return this.query();\n            }\n        });\n    }\n    else if (this.uom == \"on/off\")\n    {\n        cTypes.push({\n            cType: types.POWER_STATE_CTYPE,\n            perms: [\"pw\",\"pr\",\"ev\"],\n            format: \"bool\",\n            initialValue: 0,\n            supportEvents: true,\n            supportBonjour: false,\n            manfDescription: \"Change the power state\",\n            designedMaxLength: 1,\n            onUpdate: function(value) {\n                if (value == 0) {\n                    that.command(\"Off\")\n                } else {\n                    that.command(\"On\")\n                }\n            },\n            onRead: function() {\n                return this.query();\n            }\n        });\n    }\n\n    return cTypes;\n  },\n\n  sType: function() {\n    if (this.uom == \"%/on/off\") {\n        return types.LIGHTBULB_STYPE;\n    } else if (this.uom == \"on/off\") {\n        return types.SWITCH_STYPE;\n    } else if (this.uom == \"off/low/med/high\") {\n        return types.FAN_STYPE;\n    }\n\n    return types.SWITCH_STYPE;\n  },\n\n  getServices: function() {\n    var that = this;\n    var services = [{\n      sType: types.ACCESSORY_INFORMATION_STYPE,\n      characteristics: this.informationCharacteristics(),\n    },\n    {\n      sType: this.sType(),\n      characteristics: this.controlCharacteristics(that)\n    }];\n\n    //that.log(\"Loaded services for \" + that.name);\n    return services;\n  }\n};\n\nmodule.exports.accessory = ISYAccessory;\nmodule.exports.platform = ISYPlatform;\n","/home/travis/build/npmtest/node-npmtest-homebridge-legacy-plugins/node_modules/homebridge-legacy-plugins/platforms/LIFx.js":"'use strict';\n\n// LiFX Platform Shim for HomeBridge\n//\n// Remember to add platform to config.json. Example:\n// \"platforms\": [\n//     {\n//         \"platform\": \"LIFx\",             // required\n//         \"name\": \"LIFx\",                 // required\n//         \"access_token\": \"access token\", // required\n//         \"use_lan\": \"true\"               // optional set to \"true\" (gets and sets over the lan) or \"get\" (gets only over the lan)\n//     }\n// ],\n//\n// When you attempt to add a device, it will ask for a \"PIN code\".\n// The default code for all HomeBridge accessories is 031-45-154.\n//\n\nvar Service = require(\"../api\").homebridge.hap.Service;\nvar Characteristic = require(\"../api\").homebridge.hap.Characteristic;\nvar lifxRemoteObj = require('lifx-api');\nvar lifx_remote;\n\nvar lifxLanObj;\nvar lifx_lan;\nvar use_lan;\n\nfunction LIFxPlatform(log, config){\n    // auth info\n    this.access_token = config[\"access_token\"];\n\n    lifx_remote = new lifxRemoteObj(this.access_token);\n\n    // use remote or lan api ?\n    use_lan = config[\"use_lan\"] || false;\n\n    if (use_lan != false) {\n        lifxLanObj = require('lifx');\n        lifx_lan = lifxLanObj.init();\n    }\n\n    this.log = log;\n}\n\nLIFxPlatform.prototype = {\n    accessories: function(callback) {\n        this.log(\"Fetching LIFx devices.\");\n\n        var that = this;\n        var foundAccessories = [];\n\n        lifx_remote.listLights(\"all\", function(body) {\n            var bulbs = JSON.parse(body);\n\n            for(var i = 0; i < bulbs.length; i ++) {\n                var accessory = new LIFxBulbAccessory(that.log, bulbs[i]);\n                foundAccessories.push(accessory);\n            }\n            callback(foundAccessories)\n        });\n    }\n}\n\nfunction LIFxBulbAccessory(log, bulb) {\n    // device info\n    this.name = bulb.label;\n    this.model = bulb.product_name;\n    this.deviceId = bulb.id;\n    this.serial = bulb.uuid;\n    this.capabilities = bulb.capabilities;\n    this.log = log;\n}\n\nLIFxBulbAccessory.prototype = {\n    getLan: function(type, callback){\n        var that = this;\n\n        if (!lifx_lan.bulbs[this.deviceId]) {\n            callback(new Error(\"Device not found\"), false);\n            return;\n        }\n\n        lifx_lan.requestStatus();\n        lifx_lan.on('bulbstate', function(bulb) {\n            if (callback == null) {\n                return;\n            }\n\n            if (bulb.addr.toString('hex') == that.deviceId) {\n                switch(type) {\n                    case \"power\":\n                        callback(null, bulb.state.power > 0);\n                        break;\n                    case \"brightness\":\n                        callback(null, Math.round(bulb.state.brightness * 100 / 65535));\n                        break;\n                    case \"hue\":\n                        callback(null, Math.round(bulb.state.hue * 360 / 65535));\n                        break;\n                    case \"saturation\":\n                        callback(null, Math.round(bulb.state.saturation * 100 / 65535));\n                        break;\n                }\n\n                callback = null\n            }\n        });\n    },\n    getRemote: function(type, callback){\n        var that = this;\n\n        lifx_remote.listLights(\"id:\"+ that.deviceId, function(body) {\n            var bulb = JSON.parse(body);\n\n            if (bulb.connected != true) {\n                callback(new Error(\"Device not found\"), false);\n                return;\n            }\n\n            switch(type) {\n                case \"power\":\n                    callback(null, bulb.power == \"on\" ? 1 : 0);\n                    break;\n                case \"brightness\":\n                    callback(null, Math.round(bulb.brightness * 100));\n                    break;\n                case \"hue\":\n                    callback(null, bulb.color.hue);\n                    break;\n                case \"saturation\":\n                    callback(null, Math.round(bulb.color.saturation * 100));\n                    break;\n            }\n        });\n    },\n    identify: function(callback) {\n        lifx_remote.breatheEffect(\"id:\"+ this.deviceId, 'green', null, 1, 3, false, true, 0.5, function (body) {\n            callback();\n        });\n    },\n    setLanColor: function(type, value, callback){\n        var bulb = lifx_lan.bulbs[this.deviceId];\n\n        if (!bulb) {\n            callback(new Error(\"Device not found\"), false);\n            return;\n        }\n\n        var state = {\n            hue: bulb.state.hue,\n            saturation: bulb.state.saturation,\n            brightness: bulb.state.brightness,\n            kelvin: bulb.state.kelvin\n        };\n\n        var scale = type == \"hue\" ? 360 : 100;\n\n        state[type] = Math.round(value * 65535 / scale) & 0xffff;\n        lifx_lan.lightsColour(state.hue, state.saturation, state.brightness, state.kelvin, 0, bulb);\n\n        callback(null);\n    },\n    setLanPower: function(state, callback){\n        var bulb = lifx_lan.bulbs[this.deviceId];\n\n        if (!bulb) {\n            callback(new Error(\"Device not found\"), false);\n            return;\n        }\n\n        if (state) {\n            lifx_lan.lightsOn(bulb);\n        }\n        else {\n            lifx_lan.lightsOff(bulb);\n        }\n\n        callback(null);\n    },\n    setRemoteColor: function(type, value, callback){\n        var color;\n\n        switch(type) {\n            case \"brightness\":\n                color = \"brightness:\" + (value / 100);\n                break;\n            case \"hue\":\n                color = \"hue:\" + value;\n                break;\n            case \"saturation\":\n                color = \"saturation:\" + (value / 100);\n                break;\n        }\n\n        lifx_remote.setColor(\"id:\"+ this.deviceId, color, 0, null, function (body) {\n            callback();\n        });\n    },\n    setRemotePower: function(state, callback){\n        var that = this;\n\n        lifx_remote.setPower(\"id:\"+ that.deviceId, (state == 1 ? \"on\" : \"off\"), 0, function (body) {\n            callback();\n        });\n    },\n    getServices: function() {\n        var that = this;\n        var services = []\n        var service = new Service.Lightbulb(this.name);\n\n        switch(use_lan) {\n            case true:\n            case \"true\":\n                // gets and sets over the lan api\n                service\n                .getCharacteristic(Characteristic.On)\n                .on('get', function(callback) { that.getLan(\"power\", callback);})\n                .on('set', function(value, callback) {that.setLanPower(value, callback);});\n\n                service\n                .addCharacteristic(Characteristic.Brightness)\n                .on('get', function(callback) { that.getLan(\"brightness\", callback);})\n                .on('set', function(value, callback) { that.setLanColor(\"brightness\", value, callback);});\n\n                if (this.capabilities.has_color == true) {\n                    service\n                    .addCharacteristic(Characteristic.Hue)\n                    .on('get', function(callback) { that.getLan(\"hue\", callback);})\n                    .on('set', function(value, callback) { that.setLanColor(\"hue\", value, callback);});\n\n                    service\n                    .addCharacteristic(Characteristic.Saturation)\n                    .on('get', function(callback) { that.getLan(\"saturation\", callback);})\n                    .on('set', function(value, callback) { that.setLanColor(\"saturation\", value, callback);});\n                }\n                break;\n            case \"get\":\n                // gets over the lan api, sets over the remote api\n                service\n                .getCharacteristic(Characteristic.On)\n                .on('get', function(callback) { that.getLan(\"power\", callback);})\n                .on('set', function(value, callback) {that.setRemotePower(value, callback);});\n\n                service\n                .addCharacteristic(Characteristic.Brightness)\n                .on('get', function(callback) { that.getLan(\"brightness\", callback);})\n                .on('set', function(value, callback) { that.setRemoteColor(\"brightness\", value, callback);});\n\n                if (this.capabilities.has_color == true) {\n                    service\n                    .addCharacteristic(Characteristic.Hue)\n                    .on('get', function(callback) { that.getLan(\"hue\", callback);})\n                    .on('set', function(value, callback) { that.setRemoteColor(\"hue\", value, callback);});\n\n                    service\n                    .addCharacteristic(Characteristic.Saturation)\n                    .on('get', function(callback) { that.getLan(\"saturation\", callback);})\n                    .on('set', function(value, callback) { that.setRemoteColor(\"saturation\", value, callback);});\n                }\n                break;\n            default:\n                // gets and sets over the remote api\n                service\n                .getCharacteristic(Characteristic.On)\n                .on('get', function(callback) { that.getRemote(\"power\", callback);})\n                .on('set', function(value, callback) {that.setRemotePower(value, callback);});\n\n                service\n                .addCharacteristic(Characteristic.Brightness)\n                .on('get', function(callback) { that.getRemote(\"brightness\", callback);})\n                .on('set', function(value, callback) { that.setRemoteColor(\"brightness\", value, callback);});\n\n                if (this.capabilities.has_color == true) {\n                    service\n                    .addCharacteristic(Characteristic.Hue)\n                    .on('get', function(callback) { that.getRemote(\"hue\", callback);})\n                    .on('set', function(value, callback) { that.setRemoteColor(\"hue\", value, callback);});\n\n                    service\n                    .addCharacteristic(Characteristic.Saturation)\n                    .on('get', function(callback) { that.getRemote(\"saturation\", callback);})\n                    .on('set', function(value, callback) { that.setRemoteColor(\"saturation\", value, callback);});\n                }\n        }\n\n        services.push(service);\n\n        service = new Service.AccessoryInformation();\n\n        service\n            .setCharacteristic(Characteristic.Manufacturer, \"LIFX\")\n            .setCharacteristic(Characteristic.Model, this.model)\n            .setCharacteristic(Characteristic.SerialNumber, this.serial);\n\n        services.push(service);\n\n        return services;\n    }\n}\n\nmodule.exports.accessory = LIFxBulbAccessory;\nmodule.exports.platform = LIFxPlatform;\n","/home/travis/build/npmtest/node-npmtest-homebridge-legacy-plugins/node_modules/homebridge-legacy-plugins/platforms/SmartThings.js":"// SmartThings JSON API SmartApp required\n// https://github.com/jnewland/SmartThings/blob/master/JSON.groovy\n//\nvar types = require(\"../api\").homebridge.hapLegacyTypes;\nvar request = require(\"request\");\n\nfunction SmartThingsPlatform(log, config){\n  this.log          = log;\n  this.app_id       = config[\"app_id\"];\n  this.access_token = config[\"access_token\"];\n}\n\nSmartThingsPlatform.prototype = {\n  accessories: function(callback) {\n    this.log(\"Fetching SmartThings devices...\");\n\n    var that = this;\n    var foundAccessories = [];\n\n    request.get({\n      url: \"https://graph.api.smartthings.com/api/smartapps/installations/\"+this.app_id+\"/devices?access_token=\"+this.access_token,\n      json: true\n    }, function(err, response, json) {\n      if (!err && response.statusCode == 200) {\n        if (json['switches'] != undefined) {\n          json['switches'].map(function(s) {\n            accessory = new SmartThingsAccessory(that.log, s.name, s.commands);\n            foundAccessories.push(accessory);\n          })\n        }\n        if (json['hues'] != undefined) {\n          json['hues'].map(function(s) {\n            accessory = new SmartThingsAccessory(that.log, s.name, s.commands);\n            foundAccessories.push(accessory);\n          })\n        }\n        callback(foundAccessories);\n      } else {\n        that.log(\"There was a problem authenticating with SmartThings.\");\n      }\n    });\n\n  }\n}\n\nfunction SmartThingsAccessory(log, name, commands) {\n  // device info\n  this.name     = name;\n  this.commands = commands;\n  this.log      = log;\n}\n\nSmartThingsAccessory.prototype = {\n\n  command: function(c,value) {\n    this.log(this.name + \" sending command \" + c);\n    var url = this.commands[c];\n    if (value != undefined) {\n      url = this.commands[c] + \"&value=\"+value\n    }\n\n    var that = this;\n    request.put({\n      url: url\n    }, function(err, response) {\n      if (err) {\n        that.log(\"There was a problem sending command \" + c + \" to\" + that.name);\n        that.log(url);\n      } else {\n        that.log(that.name + \" sent command \" + c);\n      }\n    })\n  },\n\n  informationCharacteristics: function() {\n    return [\n      {\n        cType: types.NAME_CTYPE,\n        onUpdate: null,\n        perms: [\"pr\"],\n        format: \"string\",\n        initialValue: this.name,\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Name of the accessory\",\n        designedMaxLength: 255\n      },{\n        cType: types.MANUFACTURER_CTYPE,\n        onUpdate: null,\n        perms: [\"pr\"],\n        format: \"string\",\n        initialValue: \"SmartThings\",\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Manufacturer\",\n        designedMaxLength: 255\n      },{\n        cType: types.MODEL_CTYPE,\n        onUpdate: null,\n        perms: [\"pr\"],\n        format: \"string\",\n        initialValue: \"Rev-1\",\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Model\",\n        designedMaxLength: 255\n      },{\n        cType: types.SERIAL_NUMBER_CTYPE,\n        onUpdate: null,\n        perms: [\"pr\"],\n        format: \"string\",\n        initialValue: \"A1S2NASF88EW\",\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"SN\",\n        designedMaxLength: 255\n      },{\n        cType: types.IDENTIFY_CTYPE,\n        onUpdate: null,\n        perms: [\"pw\"],\n        format: \"bool\",\n        initialValue: false,\n        supportEvents: false,\n        supportBonjour: false,\n        manfDescription: \"Identify Accessory\",\n        designedMaxLength: 1\n      }\n    ]\n  },\n\n  controlCharacteristics: function(that) {\n    cTypes = [{\n      cType: types.NAME_CTYPE,\n      onUpdate: null,\n      perms: [\"pr\"],\n      format: \"string\",\n      initialValue: this.name,\n      supportEvents: true,\n      supportBonjour: false,\n      manfDescription: \"Name of service\",\n      designedMaxLength: 255\n    }]\n\n    if (this.commands['on'] != undefined) {\n      cTypes.push({\n        cType: types.POWER_STATE_CTYPE,\n        onUpdate: function(value) {\n          if (value == 0) {\n            that.command(\"off\")\n          } else {\n            that.command(\"on\")\n          }\n        },\n        perms: [\"pw\",\"pr\",\"ev\"],\n        format: \"bool\",\n        initialValue: 0,\n        supportEvents: true,\n        supportBonjour: false,\n        manfDescription: \"Change the power state\",\n        designedMaxLength: 1\n      })\n    }\n\n    if (this.commands['on'] != undefined) {\n      cTypes.push({\n        cType: types.BRIGHTNESS_CTYPE,\n        onUpdate: function(value) { that.command(\"setLevel\", value); },\n        perms: [\"pw\",\"pr\",\"ev\"],\n        format: \"int\",\n        initialValue:  0,\n        supportEvents: true,\n        supportBonjour: false,\n        manfDescription: \"Adjust Brightness of Light\",\n        designedMinValue: 0,\n        designedMaxValue: 100,\n        designedMinStep: 1,\n        unit: \"%\"\n      })\n    }\n\n    if (this.commands['setHue'] != undefined) {\n      cTypes.push({\n        cType: types.HUE_CTYPE,\n        onUpdate: function(value) { that.command(\"setHue\", value); },\n        perms: [\"pw\",\"pr\",\"ev\"],\n        format: \"int\",\n        initialValue:  0,\n        supportEvents: true,\n        supportBonjour: false,\n        manfDescription: \"Adjust Hue of Light\",\n        designedMinValue: 0,\n        designedMaxValue: 360,\n        designedMinStep: 1,\n        unit: \"arcdegrees\"\n      })\n    }\n\n    if (this.commands['setSaturation'] != undefined) {\n      cTypes.push({\n        cType: types.SATURATION_CTYPE,\n        onUpdate: function(value) { that.command(\"setSaturation\", value); },\n        perms: [\"pw\",\"pr\",\"ev\"],\n        format: \"int\",\n        initialValue:  0,\n        supportEvents: true,\n        supportBonjour: false,\n        manfDescription: \"Adjust Brightness of Light\",\n        designedMinValue: 0,\n        designedMaxValue: 100,\n        designedMinStep: 1,\n        unit: \"%\"\n      })\n    }\n\n    return cTypes\n  },\n\n  sType: function() {\n    if (this.commands['setLevel'] != undefined) {\n      return types.LIGHTBULB_STYPE\n    } else {\n      return types.SWITCH_STYPE\n    }\n  },\n\n  getServices: function() {\n    var that = this;\n    var services = [{\n      sType: types.ACCESSORY_INFORMATION_STYPE,\n      characteristics: this.informationCharacteristics(),\n    },\n    {\n      sType: this.sType(),\n      characteristics: this.controlCharacteristics(that)\n    }];\n    this.log(\"Loaded services for \" + this.name)\n    return services;\n  }\n};\n\nmodule.exports.accessory = SmartThingsAccessory;\nmodule.exports.platform = SmartThingsPlatform;\n","/home/travis/build/npmtest/node-npmtest-homebridge-legacy-plugins/node_modules/homebridge-legacy-plugins/platforms/TelldusLive.js":"var types = require(\"../api\").homebridge.hapLegacyTypes;\nvar TellduAPI = require(\"telldus-live\");\n\nfunction TelldusLivePlatform(log, config) {\n    var that = this;\n    that.log = log;\n\n    that.isLoggedIn = false;\n\n    // Login to Telldus Live!\n    that.cloud = new TellduAPI.TelldusAPI({publicKey: config[\"public_key\"], privateKey: config[\"private_key\"]})\n        .login(config[\"token\"], config[\"token_secret\"], function(err, user) {\n            if (!!err) that.log(\"Login error: \" + err.message);\n            that.log(\"User logged in: \" + user.firstname + \" \" + user.lastname + \", \" + user.email);\n            that.isLoggedIn = true;\n        }\n    );\n}\n\nTelldusLivePlatform.prototype = {\n\n    accessories: function(callback) {\n        var that = this;\n\n        that.log(\"Fetching devices...\");\n\n        that.cloud.getDevices(function(err, devices) {\n\n            if (!!err) return that.log('getDevices: ' + err.message);\n\n            var foundAccessories = [];\n\n            // Clean non device\n            for (var i = 0; i < devices.length; i++) {\n                if (devices[i].type != 'device') {\n                    devices.splice(i, 1);\n                }\n            }\n\n            for (var i = 0; i < devices.length; i++) {\n                if (devices[i].type === 'device') {\n                    TelldusLiveAccessory.create(that.log, devices[i], that.cloud, function(err, accessory) {\n                        if (!!err) that.log(\"Couldn't load device info\");\n                        foundAccessories.push(accessory);\n                        if (foundAccessories.length >= devices.length) {\n                            callback(foundAccessories);\n                        }\n                    });\n                }\n            }\n\n        });\n    }\n};\n\nvar TelldusLiveAccessory = function TelldusLiveAccessory(log, cloud, device) {\n\n    this.log   = log;\n    this.cloud = cloud;\n\n    var m = device.model ? device.model.split(':') : ['unknown', 'unknown'] ;\n\n    // Set accessory info\n    this.device         = device;\n    this.id             = device.id;\n    this.name           = device.name;\n    this.manufacturer   = m[1];\n    this.model          = m[0];\n    this.state          = device.state;\n    this.stateValue     = device.stateValue;\n    this.status         = device.status;\n};\n\nTelldusLiveAccessory.create = function (log, device, cloud, callback) {\n\n    cloud.getDeviceInfo(device, function(err, device) {\n\n        if (!!err) that.log(\"Couldn't load device info\");\n\n        callback(err, new TelldusLiveAccessory(log, cloud, device));\n    });\n};\n\nTelldusLiveAccessory.prototype = {\n\n    dimmerValue: function() {\n\n        if (this.state === 1) {\n            return 100;\n        }\n\n        if (this.state === 16 && this.stateValue != \"unde\") {\n            return parseInt(this.stateValue * 100 / 255);\n        }\n\n        return 0;\n    },\n\n    informationCharacteristics: function() {\n        var that = this;\n\n        informationCharacteristics = [\n            {\n                cType: types.NAME_CTYPE,\n                onUpdate: null,\n                perms: [\"pr\"],\n                format: \"string\",\n                initialValue: that.name,\n                supportEvents: false,\n                supportBonjour: false,\n                manfDescription: \"Name of the accessory\",\n                designedMaxLength: 255\n            },{\n                cType: types.MANUFACTURER_CTYPE,\n                onUpdate: null,\n                perms: [\"pr\"],\n                format: \"string\",\n                initialValue: that.manufacturer,\n                supportEvents: false,\n                supportBonjour: false,\n                manfDescription: \"Manufacturer\",\n                designedMaxLength: 255\n            },{\n                cType: types.MODEL_CTYPE,\n                onUpdate: null,\n                perms: [\"pr\"],\n                format: \"string\",\n                initialValue: that.model,\n                supportEvents: false,\n                supportBonjour: false,\n                manfDescription: \"Model\",\n                designedMaxLength: 255\n            },{\n                cType: types.SERIAL_NUMBER_CTYPE,\n                onUpdate: null,\n                perms: [\"pr\"],\n                format: \"string\",\n                initialValue: \"A1S2NASF88EW\",\n                supportEvents: false,\n                supportBonjour: false,\n                manfDescription: \"SN\",\n                designedMaxLength: 255\n            },{\n                cType: types.IDENTIFY_CTYPE,\n                onUpdate: function () {\n                    that.cloud.onOffDevice(that.device, true, function(err, result) {\n                        if (!!err) that.log(\"Error: \" + err.message);\n                        that.cloud.onOffDevice(that.device, false, function(err, result) {\n                            if (!!err) that.log(\"Error: \" + err.message);\n                            that.cloud.onOffDevice(that.device, true, function(err, result) {\n                                if (!!err) that.log(\"Error: \" + err.message);\n                                that.cloud.onOffDevice(that.device, false, function(err, result) {\n                                    if (!!err) that.log(\"Error: \" + err.message);\n                                    that.cloud.onOffDevice(that.device, true, function(err, result) {\n                                        if (!!err) that.log(\"Error: \" + err.message);\n                                    })\n                                })\n                            })\n                        })\n                    })\n                },\n                perms: [\"pw\"],\n                format: \"bool\",\n                initialValue: false,\n                supportEvents: false,\n                supportBonjour: false,\n                manfDescription: \"Identify Accessory\",\n                designedMaxLength: 1\n            }\n        ];\n        return informationCharacteristics;\n    },\n\n    controlCharacteristics: function() {\n        var that = this;\n\n        cTypes = [{\n            cType: types.NAME_CTYPE,\n            onUpdate: null,\n            perms: [\"pr\"],\n            format: \"string\",\n            initialValue: that.name,\n            supportEvents: true,\n            supportBonjour: false,\n            manfDescription: \"Name of service\",\n            designedMaxLength: 255\n        }]\n\n        cTypes.push({\n            cType: types.POWER_STATE_CTYPE,\n            onUpdate: function(value) {\n                if (value == 1) {\n                    that.cloud.onOffDevice(that.device, value, function(err, result) {\n                        if (!!err) {\n                            that.log(\"Error: \" + err.message)\n                        } else {\n                            that.log(that.name + \" - Updated power state: \" + (value === true ? 'ON' : 'OFF'));\n                        }\n                    });\n                } else {\n                    that.cloud.onOffDevice(that.device, value, function(err, result) {\n                        if (!!err) {\n                            that.log(\"Error: \" + err.message)\n                        } else {\n                            that.log(that.name + \" - Updated power state: \" + (value === true ? 'ON' : 'OFF'));\n                        }\n                    });\n                }\n            },\n            perms: [\"pw\",\"pr\",\"ev\"],\n            format: \"bool\",\n            initialValue: (that.state != 2 && (that.state === 16 && that.stateValue != \"0\")) ? 1 : 0,\n            supportEvents: true,\n            supportBonjour: false,\n            manfDescription: \"Change the power state\",\n            designedMaxLength: 1\n        })\n\n        if (that.model === \"selflearning-dimmer\") {\n            cTypes.push({\n                cType: types.BRIGHTNESS_CTYPE,\n                onUpdate: function (value) {\n                    that.cloud.dimDevice(that.device, (255 * (value / 100)), function (err, result) {\n                        if (!!err) {\n                            that.log(\"Error: \" + err.message);\n                        } else {\n                            that.log(that.name + \" - Updated brightness: \" + value);\n                        }\n                    });\n                },\n                perms: [\"pw\", \"pr\", \"ev\"],\n                format: \"int\",\n                initialValue: that.dimmerValue(),\n                supportEvents: true,\n                supportBonjour: false,\n                manfDescription: \"Adjust Brightness of Light\",\n                designedMinValue: 0,\n                designedMaxValue: 100,\n                designedMinStep: 1,\n                unit: \"%\"\n            })\n        }\n\n        return cTypes\n    },\n\n    getServices: function() {\n\n        var services = [\n            {\n                sType: types.ACCESSORY_INFORMATION_STYPE,\n                characteristics: this.informationCharacteristics()\n            },\n            {\n                sType: types.LIGHTBULB_STYPE,\n                characteristics: this.controlCharacteristics()\n            }\n        ];\n\n        return services;\n    }\n};\n\nmodule.exports.platform = TelldusLivePlatform;\nmodule.exports.accessory = TelldusLiveAccessory;","/home/travis/build/npmtest/node-npmtest-homebridge-legacy-plugins/node_modules/homebridge-legacy-plugins/platforms/ZWayServer.js":"var debug = require('debug')('ZWayServer');\nvar Service = require(\"../api\").homebridge.hap.Service;\nvar Characteristic = require(\"../api\").homebridge.hap.Characteristic;\nvar types = require(\"../api\").homebridge.hapLegacyTypes;\nvar request = require(\"request\");\nvar tough = require('tough-cookie');\nvar Q = require(\"q\");\n\nfunction ZWayServerPlatform(log, config){\n    this.log          = log;\n    this.url          = config[\"url\"];\n    this.login        = config[\"login\"];\n    this.password     = config[\"password\"];\n    this.opt_in       = config[\"opt_in\"];\n    this.name_overrides = config[\"name_overrides\"];\n    this.batteryLow   = config[\"battery_low_level\"] || 15;\n    this.pollInterval = config[\"poll_interval\"] || 2;\n    this.splitServices= config[\"split_services\"] || false;\n    this.lastUpdate   = 0;\n    this.cxVDevMap    = {};\n    this.vDevStore    = {};\n    this.sessionId = \"\";\n    this.jar = request.jar(new tough.CookieJar());\n}\n\nZWayServerPlatform.getVDevTypeKey = function(vdev){\n    return vdev.deviceType + (vdev.metrics && vdev.metrics.probeTitle ? \".\" + vdev.metrics.probeTitle : \"\")\n}\n\nZWayServerPlatform.prototype = {\n\n    zwayRequest: function(opts){\n        var that = this;\n        var deferred = Q.defer();\n\n        opts.jar = true;//this.jar;\n        opts.json = true;\n        opts.headers = {\n            \"Cookie\": \"ZWAYSession=\" + this.sessionId\n        };\n\n        request(opts, function(error, response, body){\n            if(response.statusCode == 401){\n                debug(\"Authenticating...\");\n                request({\n                    method: \"POST\",\n                    url: that.url + 'ZAutomation/api/v1/login',\n                    body: { //JSON.stringify({\n                        \"form\": true,\n                        \"login\": that.login,\n                        \"password\": that.password,\n                        \"keepme\": false,\n                        \"default_ui\": 1\n                    },\n                    headers: {\n                        \"Accept\": \"application/json\",\n                        \"Content-Type\": \"application/json\"\n                    },\n                    json: true,\n                    jar: true//that.jar\n                }, function(error, response, body){\n                    if(response.statusCode == 200){\n                        that.sessionId = body.data.sid;\n                        opts.headers[\"Cookie\"] = \"ZWAYSession=\" + that.sessionId;\n                        debug(\"Authenticated. Resubmitting original request...\");\n                        request(opts, function(error, response, body){\n                            if(response.statusCode == 200){\n                                deferred.resolve(body);\n                            } else {\n                                deferred.reject(response);\n                            }\n                        });\n                    } else {\n                        deferred.reject(response);\n                    }\n                });\n            } else if(response.statusCode == 200) {\n                deferred.resolve(body);\n            } else {\n                deferred.reject(response);\n            }\n        });\n        return deferred.promise;\n    }\n    ,\n    getTagValue: function(vdev, tagStem){\n        if(!(vdev.tags && vdev.tags.length > 0)) return false;\n        var tagStem = \"Homebridge.\" + tagStem;\n        if(vdev.tags.indexOf(tagStem) >= 0) return true;\n        var tags = vdev.tags, l = tags.length, tag;\n        for(var i = 0; i < l; i++){\n            tag = tags[i];\n            if(tag.indexOf(tagStem + \":\") === 0){\n                return tag.substr(tagStem.length + 1);\n            }\n        }\n        return false;\n    }\n    ,\n    accessories: function(callback) {\n        debug(\"Fetching Z-Way devices...\");\n\n        //TODO: Unify this with getVDevServices, so there's only one place with mapping between service and vDev type.\n        //Note: Order matters!\n        var primaryDeviceClasses = [\n            \"thermostat\",\n            \"switchMultilevel\",\n            \"switchBinary\",\n            \"sensorBinary.Door/Window\",\n            \"sensorMultilevel.Temperature\"\n        ];\n\n        var that = this;\n        var foundAccessories = [];\n\n        this.zwayRequest({\n            method: \"GET\",\n            url: this.url + 'ZAutomation/api/v1/devices'\n        }).then(function(result){\n            this.lastUpdate = result.data.updateTime;\n            \n            var devices = result.data.devices;\n            var groupedDevices = {};\n            for(var i = 0; i < devices.length; i++){\n                var vdev = devices[i];\n                if(this.getTagValue(\"Skip\")) { debug(\"Tag says skip!\"); continue; }\n                if(this.opt_in && !this.getTagValue(vdev, \"Include\")) continue;\n                \n                var gdid = this.getTagValue(vdev, \"Accessory.Id\");\n                if(!gdid){\n                    gdid = vdev.id.replace(/^(.*?)_zway_(\\d+-\\d+)-\\d.*/, '$1_$2');\n                }\n                \n                var gd = groupedDevices[gdid] || (groupedDevices[gdid] = { devices: [], types: {}, extras: {}, primary: undefined, cxmap: {} });\n                \n                gd.devices.push(vdev);\n                var vdevIndex = gd.devices.length - 1;\n                \n                var tk = ZWayServerPlatform.getVDevTypeKey(vdev);\n                \n                // If this is explicitly set as primary, set it now...\n                if(this.getTagValue(vdev, \"IsPrimary\")){\n                    // everybody out of the way! Can't be in \"extras\" if you're the primary...\n                    if(gd.types[tk] !== undefined){\n                        gd.extras[tk] = gd.extras[tk] || [];\n                        gd.extras[tk].push(gd.types[tk]);\n                        delete gd.types[tk]; // clear the way for this one to be set here below...\n                    }\n                    gd.primary = vdevIndex;\n                    //gd.types[tk] = gd.primary;\n                }\n                \n                if(gd.types[tk] === undefined){\n                    gd.types[tk] = vdevIndex;\n                } else {\n                    gd.extras[tk] = gd.extras[tk] || [];\n                    gd.extras[tk].push(vdevIndex);\n                }\n                if(tk !== vdev.deviceType) gd.types[vdev.deviceType] = vdevIndex; // also include the deviceType only as a possibility\n                \n                // Create a map entry when Homebridge.Characteristic.Type is set...\n                var ctype = this.getTagValue(vdev, \"Characteristic.Type\");\n                if(ctype && Characteristic[ctype]){\n                    var cx = new Characteristic[ctype]();\n                    gd.cxmap[cx.UUID] = vdevIndex;\n                }\n            }\n            \n            for(var gdid in groupedDevices) {\n                if(!groupedDevices.hasOwnProperty(gdid)) continue;\n                \n                // Debug/log...\n                debug('Got grouped device ' + gdid + ' consiting of devices:');\n                var gd = groupedDevices[gdid];\n                for(var j = 0; j < gd.devices.length; j++){\n                    debug(gd.devices[j].id + \" - \" + gd.devices[j].deviceType + (gd.devices[j].metrics && gd.devices[j].metrics.probeTitle ? \".\" + gd.devices[j].metrics.probeTitle : \"\"));\n                }\n                \n                var accessory = null;\n                if(gd.primary !== undefined){\n                    var pd = gd.devices[gd.primary];\n                    var name = pd.metrics && pd.metrics.title ? pd.metrics.title : pd.id;\n                    accessory = new ZWayServerAccessory(name, gd, that);\n                }\n                else for(var ti = 0; ti < primaryDeviceClasses.length; ti++){\n                    if(gd.types[primaryDeviceClasses[ti]] !== undefined){\n                        gd.primary = gd.types[primaryDeviceClasses[ti]];\n                        var pd = gd.devices[gd.primary];\n                        var name = pd.metrics && pd.metrics.title ? pd.metrics.title : pd.id;\n                        //debug(\"Using primary device with type \" + primaryDeviceClasses[ti] + \", \" + name + \" (\" + pd.id + \") as primary.\");\n                        accessory = new ZWayServerAccessory(name, gd, that);\n                        break;\n                    }\n                }\n                \n                if(!accessory)\n                    debug(\"WARN: Didn't find suitable device class!\");\n                else\n                    foundAccessories.push(accessory);\n                \n            }\n            callback(foundAccessories);\n            \n            // Start the polling process...\n            this.pollingTimer = setTimeout(this.pollUpdate.bind(this), this.pollInterval*1000);\n            \n        }.bind(this));\n\n    }\n    ,\n    \n    pollUpdate: function(){\n        //debug(\"Polling for updates since \" + this.lastUpdate + \"...\");\n        return this.zwayRequest({\n            method: \"GET\",\n            url: this.url + 'ZAutomation/api/v1/devices',\n            qs: {since: this.lastUpdate}\n        }).then(function(result){\n            this.lastUpdate = result.data.updateTime;\n            if(result.data && result.data.devices && result.data.devices.length){\n                var updates = result.data.devices;\n                debug(\"Got \" + updates.length + \" updates.\");\n                for(var i = 0; i < updates.length; i++){\n                    var upd = updates[i];\n                    if(this.cxVDevMap[upd.id]){\n                        var vdev = this.vDevStore[upd.id];\n                        vdev.metrics.level = upd.metrics.level;\n                        if(upd.metrics.color){\n                            vdev.metrics.r = upd.metrics.r;\n                            vdev.metrics.g = upd.metrics.g;\n                            vdev.metrics.b = upd.metrics.b;\n                        }\n                        vdev.updateTime = upd.updateTime;\n                        var cxs = this.cxVDevMap[upd.id];\n                        for(var j = 0; j < cxs.length; j++){\n                            var cx = cxs[j];\n                            if(typeof cx.zway_getValueFromVDev !== \"function\") continue;\n                            var oldValue = cx.value;\n                            var newValue = cx.zway_getValueFromVDev(vdev);\n                            if(oldValue !== newValue){\n                                cx.value = newValue;\n                                cx.emit('change', { oldValue:oldValue, newValue:cx.value, context:null });\n                                debug(\"Updated characteristic \" + cx.displayName + \" on \" + vdev.metrics.title);\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // setup next poll...\n            this.pollingTimer = setTimeout(this.pollUpdate.bind(this), this.pollInterval*1000);\n        }.bind(this));\n    }\n\n}\n\nfunction ZWayServerAccessory(name, devDesc, platform) {\n  // device info\n  this.name     = name;\n  this.devDesc  = devDesc;\n  this.platform = platform;\n  this.log      = platform.log;\n}\n\n\nZWayServerAccessory.prototype = {\n    \n    getVDev: function(vdev){\n        return this.platform.zwayRequest({\n            method: \"GET\",\n            url: this.platform.url + 'ZAutomation/api/v1/devices/' + vdev.id\n        })//.then(function());\n    }\n    ,\n    command: function(vdev, command, value) {\n        return this.platform.zwayRequest({\n            method: \"GET\",\n            url: this.platform.url + 'ZAutomation/api/v1/devices/' + vdev.id + '/command/' + command,\n            qs: (value === undefined ? undefined : value)\n        });\n    },\n    \n    rgb2hsv: function(obj) {\n        // RGB: 0-255; H: 0-360, S,V: 0-100\n        var r = obj.r/255, g = obj.g/255, b = obj.b/255;\n        var max, min, d, h, s, v;\n\n        min = Math.min(r, Math.min(g, b));\n        max = Math.max(r, Math.max(g, b));\n\n        if (min === max) {\n            // shade of gray\n            return {h: 0, s: 0, v: r * 100};\n        }\n\n        var d = (r === min) ? g - b : ((b === min) ? r - g : b - r);\n        h = (r === min) ? 3 : ((b === min) ? 1 : 5);\n        h = 60 * (h - d/(max - min));\n        s = (max - min) / max;\n        v = max;\n        return {\"h\": h, \"s\": s * 100, \"v\": v * 100};\n    }\n    ,\n    hsv2rgb: function(obj) {\n        // H: 0-360; S,V: 0-100; RGB: 0-255\n        var r, g, b;\n        var sfrac = obj.s / 100;\n        var vfrac = obj.v / 100;\n        \n        if(sfrac === 0){\n            var vbyte = Math.round(vfrac*255);\n            return { r: vbyte, g: vbyte, b: vbyte };\n        }\n        \n        var hdb60 = (obj.h % 360) / 60;\n        var sector = Math.floor(hdb60);\n        var fpart = hdb60 - sector;\n        var c = vfrac * (1 - sfrac);\n        var x1 = vfrac * (1 - sfrac * fpart);\n        var x2 = vfrac * (1 - sfrac * (1 - fpart));\n        switch(sector){\n            case 0:\n                r = vfrac; g = x2;    b = c;      break;\n            case 1:\n                r = x1;    g = vfrac; b = c;      break;\n            case 2:\n                r = c;     g = vfrac; b = x2;     break;\n            case 3:\n                r = c;     g = x1;    b = vfrac;  break;\n            case 4:\n                r = x2;    g = c;     b = vfrac;  break;\n            case 5:\n            default:\n                r = vfrac; g = c;     b = x1;     break;\n        }\n\n        return { \"r\": Math.round(255 * r), \"g\": Math.round(255 * g), \"b\": Math.round(255 * b) };\n    }\n    ,\n    getVDevServices: function(vdev){\n        var typeKey = ZWayServerPlatform.getVDevTypeKey(vdev);\n        var services = [], service;\n        switch (typeKey) {\n            case \"thermostat\":\n                services.push(new Service.Thermostat(vdev.metrics.title, vdev.id));\n                break;\n            case \"switchBinary\":\n                services.push(new Service.Switch(vdev.metrics.title, vdev.id));\n                break;\n            case \"switchRGBW\":\n            case \"switchMultilevel\":\n                if(this.platform.getTagValue(vdev, \"Service.Type\") === \"Switch\"){\n                    services.push(new Service.Switch(vdev.metrics.title, vdev.id));\n                } else {\n                    services.push(new Service.Lightbulb(vdev.metrics.title, vdev.id));\n                }\n                break;\n            case \"sensorBinary.Door/Window\":\n                var stype = this.platform.getTagValue(vdev, \"Service.Type\");\n                if(stype === \"ContactSensor\"){\n                    services.push(new Service.ContactSensor(vdev.metrics.title, vdev.id));\n                } else if(stype === \"GarageDoorOpener\"){\n                    services.push(new Service.GarageDoorOpener(vdev.metrics.title, vdev.id));\n                } else if(stype === \"Window\"){\n                    services.push(new Service.GarageDoorOpener(vdev.metrics.title, vdev.id));\n                } else {\n                    services.push(new Service.Door(vdev.metrics.title, vdev.id));\n                }\n                break;\n            case \"sensorMultilevel.Temperature\":\n                services.push(new Service.TemperatureSensor(vdev.metrics.title, vdev.id));\n                break;\n            case \"battery.Battery\":\n                services.push(new Service.BatteryService(vdev.metrics.title, vdev.id));\n                break;\n            case \"sensorMultilevel.Luminiscence\":\n                services.push(new Service.LightSensor(vdev.metrics.title, vdev.id));\n                break;\n            case \"sensorBinary\":\n                var stype = this.platform.getTagValue(vdev, \"Service.Type\");\n                if(stype === \"MotionSensor\"){\n                    services.push(new Service.MotionSensor(vdev.metrics.title, vdev.id));\n                } else {\n                    services.push(new Service.ContactSensor(vdev.metrics.title, vdev.id));\n                }\n        }\n        \n        var validServices =[];\n        for(var i = 0; i < services.length; i++){\n            if(this.configureService(services[i], vdev))\n                validServices.push(services[i]);\n        }\n        \n        return validServices;\n    }\n    ,\n    uuidToTypeKeyMap: null\n    ,\n    extraCharacteristicsMap: {\n        \"battery.Battery\": [Characteristic.BatteryLevel, Characteristic.StatusLowBattery],\n        \"sensorMultilevel.Temperature\": [Characteristic.CurrentTemperature, Characteristic.TemperatureDisplayUnits],\n        \"sensorMultilevel.Luminiscence\": [Characteristic.CurrentAmbientLightLevel]\n    }\n    ,\n    getVDevForCharacteristic: function(cx, vdevPreferred){\n        \n        // If we know which vdev should be used for this Characteristic, we're done!\n        if(this.devDesc.cxmap[cx.UUID] !== undefined){ \n           return this.devDesc.devices[this.devDesc.cxmap[cx.UUID]];\n        }\n\n        var map = this.uuidToTypeKeyMap;\n        if(!map){\n            this.uuidToTypeKeyMap = map = {};\n            map[(new Characteristic.On).UUID] = [\"switchBinary\",\"switchMultilevel\"];\n            map[(new Characteristic.Brightness).UUID] = [\"switchMultilevel\"];\n            map[(new Characteristic.Hue).UUID] = [\"switchRGBW\"];\n            map[(new Characteristic.Saturation).UUID] = [\"switchRGBW\"];\n            map[(new Characteristic.CurrentTemperature).UUID] = [\"sensorMultilevel.Temperature\",\"thermostat\"];\n            map[(new Characteristic.TargetTemperature).UUID] = [\"thermostat\"];\n            map[(new Characteristic.TemperatureDisplayUnits).UUID] = [\"sensorMultilevel.Temperature\",\"thermostat\"]; //TODO: Always a fixed result\n            map[(new Characteristic.CurrentHeatingCoolingState).UUID] = [\"thermostat\"]; //TODO: Always a fixed result\n            map[(new Characteristic.TargetHeatingCoolingState).UUID] = [\"thermostat\"]; //TODO: Always a fixed result\n            map[(new Characteristic.CurrentDoorState).UUID] = [\"sensorBinary.Door/Window\",\"sensorBinary\"];\n            map[(new Characteristic.TargetDoorState).UUID] = [\"sensorBinary.Door/Window\",\"sensorBinary\"]; //TODO: Always a fixed result\n            map[(new Characteristic.ContactSensorState).UUID] = [\"sensorBinary\"];\n            map[(new Characteristic.CurrentPosition).UUID] = [\"sensorBinary.Door/Window\",\"sensorBinary\"];\n            map[(new Characteristic.TargetPosition).UUID] = [\"sensorBinary.Door/Window\",\"sensorBinary\"];\n            map[(new Characteristic.PositionState).UUID] = [\"sensorBinary.Door/Window\",\"sensorBinary\"];\n            map[(new Characteristic.ObstructionDetected).UUID] = [\"sensorBinary.Door/Window\",\"sensorBinary\"]; //TODO: Always a fixed result\n            map[(new Characteristic.BatteryLevel).UUID] = [\"battery.Battery\"];\n            map[(new Characteristic.StatusLowBattery).UUID] = [\"battery.Battery\"];\n            map[(new Characteristic.ChargingState).UUID] = [\"battery.Battery\"]; //TODO: Always a fixed result\n            map[(new Characteristic.CurrentAmbientLightLevel).UUID] = [\"sensorMultilevel.Luminiscence\"];\n        }\n        \n        if(cx instanceof Characteristic.Name) return vdevPreferred;\n        \n        // Special case!: If cx is a CurrentTemperature, ignore the preferred device...we want the sensor if available!\n        if(cx instanceof Characteristic.CurrentTemperature) vdevPreferred = null;\n        //\n        \n        var typekeys = map[cx.UUID];\n        if(typekeys === undefined) return null;\n        \n        if(vdevPreferred && typekeys.indexOf(ZWayServerPlatform.getVDevTypeKey(vdevPreferred)) >= 0){\n            return vdevPreferred;\n        }\n        \n        var candidates = this.devDesc.devices;\n        for(var i = 0; i < typekeys.length; i++){\n            for(var j = 0; j < candidates.length; j++){\n                if(ZWayServerPlatform.getVDevTypeKey(candidates[j]) === typekeys[i]) return candidates[j];\n            }\n        }\n        \n        return null;\n    }\n    ,\n    configureCharacteristic: function(cx, vdev, service){\n        var accessory = this;\n        \n        // Add this combination to the maps...\n        if(!this.platform.cxVDevMap[vdev.id]) this.platform.cxVDevMap[vdev.id] = [];\n        this.platform.cxVDevMap[vdev.id].push(cx);\n        if(!this.platform.vDevStore[vdev.id]) this.platform.vDevStore[vdev.id] = vdev;\n        \n        if(cx instanceof Characteristic.Name){\n            cx.zway_getValueFromVDev = function(vdev){\n                return vdev.metrics.title;\n            };\n            cx.value = cx.zway_getValueFromVDev(vdev);\n            cx.on('get', function(callback, context){\n                debug(\"Getting value for \" + vdev.metrics.title + \", characteristic \\\"\" + cx.displayName + \"\\\"...\");\n                callback(false, accessory.name);\n            });\n            return cx;\n        }\n        \n        // We don't want to override \"Name\"'s name...so we just move this below that block.\n        var descOverride = this.platform.getTagValue(vdev, \"Characteristic.Description\");\n        if(descOverride){\n            cx.displayName = descOverride;\n        }\n        \n        if(cx instanceof Characteristic.On){\n            cx.zway_getValueFromVDev = function(vdev){\n                var val = false;\n                if(vdev.metrics.level === \"on\"){\n                    val = true;\n                } else if(vdev.metrics.level <= 5) {\n                    val = false;\n                } else if (vdev.metrics.level > 5) {\n                    val = true;\n                }\n                return val;\n            };\n            cx.value = cx.zway_getValueFromVDev(vdev);\n            cx.on('get', function(callback, context){\n                debug(\"Getting value for \" + vdev.metrics.title + \", characteristic \\\"\" + cx.displayName + \"\\\"...\");\n                this.getVDev(vdev).then(function(result){\n                    debug(\"Got value: \" + cx.zway_getValueFromVDev(result.data) + \", for \" + vdev.metrics.title + \".\");\n                    callback(false, cx.zway_getValueFromVDev(result.data));\n                });\n            }.bind(this));\n            cx.on('set', function(powerOn, callback){\n                this.command(vdev, powerOn ? \"on\" : \"off\").then(function(result){\n                    callback();\n                });\n            }.bind(this));\n            cx.on('change', function(ev){\n                debug(\"Device \" + vdev.metrics.title + \", characteristic \" + cx.displayName + \" changed from \" + ev.oldValue + \" to \" + ev.newValue);\n            });\n            return cx;\n        }\n\n        if(cx instanceof Characteristic.Brightness){\n            cx.zway_getValueFromVDev = function(vdev){\n                return vdev.metrics.level;\n            };\n            cx.value = cx.zway_getValueFromVDev(vdev);\n            cx.on('get', function(callback, context){\n                debug(\"Getting value for \" + vdev.metrics.title + \", characteristic \\\"\" + cx.displayName + \"\\\"...\");\n                this.getVDev(vdev).then(function(result){\n                    debug(\"Got value: \" + cx.zway_getValueFromVDev(result.data) + \", for \" + vdev.metrics.title + \".\");\n                    callback(false, cx.zway_getValueFromVDev(result.data));\n                });\n            }.bind(this));\n            cx.on('set', function(level, callback){\n                this.command(vdev, \"exact\", {level: parseInt(level, 10)}).then(function(result){\n                    callback();\n                });\n            }.bind(this));\n            return cx;\n        }\n\n        if(cx instanceof Characteristic.Hue){\n            cx.zway_getValueFromVDev = function(vdev){\n                debug(\"Derived value \" + accessory.rgb2hsv(vdev.metrics.color).h + \" for hue.\");\n                return accessory.rgb2hsv(vdev.metrics.color).h;\n            };\n            cx.value = cx.zway_getValueFromVDev(vdev);\n            cx.on('get', function(callback, context){\n                debug(\"Getting value for \" + vdev.metrics.title + \", characteristic \\\"\" + cx.displayName + \"\\\"...\");\n                this.getVDev(vdev).then(function(result){\n                    debug(\"Got value: \" + cx.zway_getValueFromVDev(result.data) + \", for \" + vdev.metrics.title + \".\");\n                    callback(false, cx.zway_getValueFromVDev(result.data));\n                });\n            }.bind(this));\n            cx.on('set', function(hue, callback){\n                var scx = service.getCharacteristic(Characteristic.Saturation);\n                var vcx = service.getCharacteristic(Characteristic.Brightness);\n                if(!scx || !vcx){\n                    debug(\"Hue without Saturation and Brightness is not supported! Cannot set value!\")\n                    callback(true, cx.value);\n                }\n                var rgb = this.hsv2rgb({ h: hue, s: scx.value, v: vcx.value });\n                this.command(vdev, \"exact\", { red: rgb.r, green: rgb.g, blue: rgb.b }).then(function(result){\n                    callback();\n                });\n            }.bind(this));\n            \n            return cx;\n        }\n\n        if(cx instanceof Characteristic.Saturation){\n            cx.zway_getValueFromVDev = function(vdev){\n                debug(\"Derived value \" + accessory.rgb2hsv(vdev.metrics.color).s + \" for saturation.\");\n                return accessory.rgb2hsv(vdev.metrics.color).s;\n            };\n            cx.value = cx.zway_getValueFromVDev(vdev);\n            cx.on('get', function(callback, context){\n                debug(\"Getting value for \" + vdev.metrics.title + \", characteristic \\\"\" + cx.displayName + \"\\\"...\");\n                this.getVDev(vdev).then(function(result){\n                    debug(\"Got value: \" + cx.zway_getValueFromVDev(result.data) + \", for \" + vdev.metrics.title + \".\");\n                    callback(false, cx.zway_getValueFromVDev(result.data));\n                });\n            }.bind(this));\n            cx.on('set', function(saturation, callback){\n                var hcx = service.getCharacteristic(Characteristic.Hue);\n                var vcx = service.getCharacteristic(Characteristic.Brightness);\n                if(!hcx || !vcx){\n                    debug(\"Saturation without Hue and Brightness is not supported! Cannot set value!\")\n                    callback(true, cx.value);\n                }\n                var rgb = this.hsv2rgb({ h: hcx.value, s: saturation, v: vcx.value });\n                this.command(vdev, \"exact\", { red: rgb.r, green: rgb.g, blue: rgb.b }).then(function(result){\n                    callback();\n                });\n            }.bind(this));\n            \n            return cx;\n        }\n\n        if(cx instanceof Characteristic.CurrentTemperature){\n            cx.zway_getValueFromVDev = function(vdev){\n                return vdev.metrics.level;\n            };\n            cx.value = cx.zway_getValueFromVDev(vdev);\n            cx.on('get', function(callback, context){\n                debug(\"Getting value for \" + vdev.metrics.title + \", characteristic \\\"\" + cx.displayName + \"\\\"...\");\n                this.getVDev(vdev).then(function(result){\n                    debug(\"Got value: \" + cx.zway_getValueFromVDev(result.data) + \", for \" + vdev.metrics.title + \".\");\n                    callback(false, cx.zway_getValueFromVDev(result.data));\n                });\n            }.bind(this));\n            cx.setProps({\n                minValue: vdev.metrics && vdev.metrics.min !== undefined ? vdev.metrics.min : -40,\n                maxValue: vdev.metrics && vdev.metrics.max !== undefined ? vdev.metrics.max : 999\n            });\n            return cx;\n        }\n\n        if(cx instanceof Characteristic.TargetTemperature){\n            cx.zway_getValueFromVDev = function(vdev){\n                return vdev.metrics.level;\n            };\n            cx.value = cx.zway_getValueFromVDev(vdev);\n            cx.on('get', function(callback, context){\n                debug(\"Getting value for \" + vdev.metrics.title + \", characteristic \\\"\" + cx.displayName + \"\\\"...\");\n                this.getVDev(vdev).then(function(result){\n                    debug(\"Got value: \" + cx.zway_getValueFromVDev(result.data) + \", for \" + vdev.metrics.title + \".\");\n                    callback(false, cx.zway_getValueFromVDev(result.data));\n                });\n            }.bind(this));\n            cx.on('set', function(level, callback){\n                this.command(vdev, \"exact\", {level: parseInt(level, 10)}).then(function(result){\n                    //debug(\"Got value: \" + result.data.metrics.level + \", for \" + vdev.metrics.title + \".\");\n                    callback();\n                });\n            }.bind(this));\n            cx.setProps({\n                minValue: vdev.metrics && vdev.metrics.min !== undefined ? vdev.metrics.min : 5,\n                maxValue: vdev.metrics && vdev.metrics.max !== undefined ? vdev.metrics.max : 40\n            });\n            return cx;\n        }\n\n        if(cx instanceof Characteristic.TemperatureDisplayUnits){\n            //TODO: Always in °C for now.\n            cx.zway_getValueFromVDev = function(vdev){\n                return Characteristic.TemperatureDisplayUnits.CELSIUS;\n            };\n            cx.value = cx.zway_getValueFromVDev(vdev);\n            cx.on('get', function(callback, context){\n                debug(\"Getting value for \" + vdev.metrics.title + \", characteristic \\\"\" + cx.displayName + \"\\\"...\");\n                callback(false, Characteristic.TemperatureDisplayUnits.CELSIUS);\n            });\n            cx.setProps({\n                perms: [Characteristic.Perms.READ]\n            });\n            return cx;\n        }\n        \n        if(cx instanceof Characteristic.CurrentHeatingCoolingState){\n            //TODO: Always HEAT for now, we don't have an example to work with that supports another function.\n            cx.zway_getValueFromVDev = function(vdev){\n                return Characteristic.CurrentHeatingCoolingState.HEAT;\n            };\n            cx.value = cx.zway_getValueFromVDev(vdev);\n            cx.on('get', function(callback, context){\n                debug(\"Getting value for \" + vdev.metrics.title + \", characteristic \\\"\" + cx.displayName + \"\\\"...\");\n                callback(false, Characteristic.CurrentHeatingCoolingState.HEAT);\n            });\n            return cx;\n        }\n        \n        if(cx instanceof Characteristic.TargetHeatingCoolingState){\n            //TODO: Always HEAT for now, we don't have an example to work with that supports another function.\n            cx.zway_getValueFromVDev = function(vdev){\n                return Characteristic.TargetHeatingCoolingState.HEAT;\n            };\n            cx.value = cx.zway_getValueFromVDev(vdev);\n            cx.on('get', function(callback, context){\n                debug(\"Getting value for \" + vdev.metrics.title + \", characteristic \\\"\" + cx.displayName + \"\\\"...\");\n                callback(false, Characteristic.TargetHeatingCoolingState.HEAT);\n            });\n            // Hmm... apparently if this is not setable, we can't add a thermostat change to a scene. So, make it writable but a no-op.\n            cx.on('set', function(newValue, callback){\n                debug(\"WARN: Set of TargetHeatingCoolingState not yet implemented, resetting to HEAT!\")\n                callback(undefined, Characteristic.TargetHeatingCoolingState.HEAT);\n            }.bind(this));\n            return cx;\n        }\n        \n        if(cx instanceof Characteristic.CurrentDoorState){\n            cx.zway_getValueFromVDev = function(vdev){\n                return vdev.metrics.level === \"off\" ? Characteristic.CurrentDoorState.CLOSED : Characteristic.CurrentDoorState.OPEN;\n            };\n            cx.value = cx.zway_getValueFromVDev(vdev);\n            cx.on('get', function(callback, context){\n                debug(\"Getting value for \" + vdev.metrics.title + \", characteristic \\\"\" + cx.displayName + \"\\\"...\");\n                this.getVDev(vdev).then(function(result){\n                    debug(\"Got value: \" + cx.zway_getValueFromVDev(result.data) + \", for \" + vdev.metrics.title + \".\");\n                    callback(false, cx.zway_getValueFromVDev(result.data));\n                });\n            }.bind(this));\n            cx.on('change', function(ev){\n                debug(\"Device \" + vdev.metrics.title + \", characteristic \" + cx.displayName + \" changed from \" + ev.oldValue + \" to \" + ev.newValue);\n            });\n        }\n        \n        if(cx instanceof Characteristic.TargetDoorState){\n            //TODO: We only support this for Door sensors now, so it's a fixed value.\n            cx.zway_getValueFromVDev = function(vdev){\n                return Characteristic.TargetDoorState.CLOSED;\n            };\n            cx.value = cx.zway_getValueFromVDev(vdev);\n            cx.on('get', function(callback, context){\n                debug(\"Getting value for \" + vdev.metrics.title + \", characteristic \\\"\" + cx.displayName + \"\\\"...\");\n                callback(false, Characteristic.TargetDoorState.CLOSED);\n            });\n            cx.setProps({\n                perms: [Characteristic.Perms.READ]\n            });\n        }\n        \n        if(cx instanceof Characteristic.ObstructionDetected){\n            //TODO: We only support this for Door sensors now, so it's a fixed value.\n            cx.zway_getValueFromVDev = function(vdev){\n                return false;\n            };\n            cx.value = cx.zway_getValueFromVDev(vdev);\n            cx.on('get', function(callback, context){\n                debug(\"Getting value for \" + vdev.metrics.title + \", characteristic \\\"\" + cx.displayName + \"\\\"...\");\n                callback(false, false);\n            });\n        }\n        \n        if(cx instanceof Characteristic.BatteryLevel){\n            cx.zway_getValueFromVDev = function(vdev){\n                return vdev.metrics.level;\n            };\n            cx.value = cx.zway_getValueFromVDev(vdev);\n            cx.on('get', function(callback, context){\n                debug(\"Getting value for \" + vdev.metrics.title + \", characteristic \\\"\" + cx.displayName + \"\\\"...\");\n                this.getVDev(vdev).then(function(result){\n                    debug(\"Got value: \" + cx.zway_getValueFromVDev(result.data) + \", for \" + vdev.metrics.title + \".\");\n                    callback(false, cx.zway_getValueFromVDev(result.data));\n                });\n            }.bind(this));\n        }\n        \n        if(cx instanceof Characteristic.StatusLowBattery){\n            cx.zway_getValueFromVDev = function(vdev){\n                return vdev.metrics.level <= accessory.platform.batteryLow ? Characteristic.StatusLowBattery.BATTERY_LEVEL_LOW : Characteristic.StatusLowBattery.BATTERY_LEVEL_NORMAL;\n            };\n            cx.value = cx.zway_getValueFromVDev(vdev);\n            cx.on('get', function(callback, context){\n                debug(\"Getting value for \" + vdev.metrics.title + \", characteristic \\\"\" + cx.displayName + \"\\\"...\");\n                this.getVDev(vdev).then(function(result){\n                    debug(\"Got value: \" + cx.zway_getValueFromVDev(result.data) + \", for \" + vdev.metrics.title + \".\");\n                    callback(false, cx.zway_getValueFromVDev(result.data));\n                });\n            }.bind(this));\n        }\n        \n        if(cx instanceof Characteristic.ChargingState){\n            //TODO: No known chargeable devices(?), so always return false.\n            cx.zway_getValueFromVDev = function(vdev){\n                return Characteristic.ChargingState.NOT_CHARGING;\n            };\n            cx.value = cx.zway_getValueFromVDev(vdev);\n            cx.on('get', function(callback, context){\n                debug(\"Getting value for \" + vdev.metrics.title + \", characteristic \\\"\" + cx.displayName + \"\\\"...\");\n                callback(false, Characteristic.ChargingState.NOT_CHARGING);\n            });\n        }\n     \n        if(cx instanceof Characteristic.CurrentAmbientLightLevel){\n            cx.zway_getValueFromVDev = function(vdev){\n                if(vdev.metrics.scaleTitle === \"%\"){\n                    // Completely unscientific guess, based on test-fit data and Wikipedia real-world lux values.\n                    // This will probably change!\n                    var lux = 0.0005 * (vdev.metrics.level^3.6);\n                    // Bounds checking now done upstream!\n                    //if(lux < cx.minimumValue) return cx.minimumValue; if(lux > cx.maximumValue) return cx.maximumValue;\n                    return lux;\n                } else {\n                    return vdev.metrics.level;\n                }\n            };\n            cx.value = cx.zway_getValueFromVDev(vdev);\n            cx.on('get', function(callback, context){\n                debug(\"Getting value for \" + vdev.metrics.title + \", characteristic \\\"\" + cx.displayName + \"\\\"...\");\n                this.getVDev(vdev).then(function(result){\n                    debug(\"Got value: \" + cx.zway_getValueFromVDev(result.data) + \", for \" + vdev.metrics.title + \".\");\n                    callback(false, cx.zway_getValueFromVDev(result.data));\n                });\n            }.bind(this));\n            cx.on('change', function(ev){\n                debug(\"Device \" + vdev.metrics.title + \", characteristic \" + cx.displayName + \" changed from \" + ev.oldValue + \" to \" + ev.newValue);\n            });\n            return cx;\n        }\n        \n        if(cx instanceof Characteristic.MotionDetected){\n            cx.zway_getValueFromVDev = function(vdev){\n                return vdev.metrics.level === \"off\" ? false : true;\n            };\n            cx.value = cx.zway_getValueFromVDev(vdev);\n            cx.on('get', function(callback, context){\n                debug(\"Getting value for \" + vdev.metrics.title + \", characteristic \\\"\" + cx.displayName + \"\\\"...\");\n                this.getVDev(vdev).then(function(result){\n                    debug(\"Got value: \" + cx.zway_getValueFromVDev(result.data) + \", for \" + vdev.metrics.title + \".\");\n                    callback(false, cx.zway_getValueFromVDev(result.data));\n                });\n            }.bind(this));\n            cx.on('change', function(ev){\n                debug(\"Device \" + vdev.metrics.title + \", characteristic \" + cx.displayName + \" changed from \" + ev.oldValue + \" to \" + ev.newValue);\n            });\n            return cx;\n        }\n\n        if(cx instanceof Characteristic.StatusTampered){\n            cx.zway_getValueFromVDev = function(vdev){\n                return vdev.metrics.level === \"off\" ? Characteristic.StatusTampered.NOT_TAMPERED : Characteristic.StatusTampered.TAMPERED;\n            };\n            cx.value = cx.zway_getValueFromVDev(vdev);\n            cx.on('get', function(callback, context){\n                debug(\"Getting value for \" + vdev.metrics.title + \", characteristic \\\"\" + cx.displayName + \"\\\"...\");\n                this.getVDev(vdev).then(function(result){\n                    debug(\"Got value: \" + cx.zway_getValueFromVDev(result.data) + \", for \" + vdev.metrics.title + \".\");\n                    callback(false, cx.zway_getValueFromVDev(result.data));\n                });\n            }.bind(this));\n            cx.on('change', function(ev){\n                debug(\"Device \" + vdev.metrics.title + \", characteristic \" + cx.displayName + \" changed from \" + ev.oldValue + \" to \" + ev.newValue);\n            });\n            return cx;\n        }\n\n        if(cx instanceof Characteristic.ContactSensorState){\n            cx.zway_getValueFromVDev = function(vdev){\n                var boolval = vdev.metrics.level === \"off\" ? false : true;\n                boolval = accessory.platform.getTagValue(vdev, \"ContactSensorState.Invert\") ? !boolval : boolval;\n                return boolval ? Characteristic.ContactSensorState.CONTACT_NOT_DETECTED : Characteristic.ContactSensorState.CONTACT_DETECTED;\n            };\n            cx.value = cx.zway_getValueFromVDev(vdev);\n            cx.on('get', function(callback, context){\n                debug(\"Getting value for \" + vdev.metrics.title + \", characteristic \\\"\" + cx.displayName + \"\\\"...\");\n                this.getVDev(vdev).then(function(result){\n                    debug(\"Got value: \" + cx.zway_getValueFromVDev(result.data) + \", for \" + vdev.metrics.title + \".\");\n                    callback(false, cx.zway_getValueFromVDev(result.data));\n                });\n            }.bind(this));\n            cx.on('change', function(ev){\n                debug(\"Device \" + vdev.metrics.title + \", characteristic \" + cx.displayName + \" changed from \" + ev.oldValue + \" to \" + ev.newValue);\n            });\n            return cx;\n        }\n\n        if(cx instanceof Characteristic.CurrentPosition){\n            cx.zway_getValueFromVDev = function(vdev){\n                return vdev.metrics.level === \"off\" ? 0 : 100 ;\n            };\n            cx.value = cx.zway_getValueFromVDev(vdev);\n            cx.on('get', function(callback, context){\n                debug(\"Getting value for \" + vdev.metrics.title + \", characteristic \\\"\" + cx.displayName + \"\\\"...\");\n                this.getVDev(vdev).then(function(result){\n                    debug(\"Got value: \" + cx.zway_getValueFromVDev(result.data) + \", for \" + vdev.metrics.title + \".\");\n                    callback(false, cx.zway_getValueFromVDev(result.data));\n                });\n            }.bind(this));\n            cx.on('change', function(ev){\n                debug(\"Device \" + vdev.metrics.title + \", characteristic \" + cx.displayName + \" changed from \" + ev.oldValue + \" to \" + ev.newValue);\n            });\n            return cx;\n        }\n\n        if(cx instanceof Characteristic.TargetPosition){\n            //TODO: Currently only Door sensors, so always return 0.\n            cx.zway_getValueFromVDev = function(vdev){\n                return 0;\n            };\n            cx.value = cx.zway_getValueFromVDev(vdev);\n            cx.on('get', function(callback, context){\n                debug(\"Getting value for \" + vdev.metrics.title + \", characteristic \\\"\" + cx.displayName + \"\\\"...\");\n                callback(false, cx.zway_getValueFromVDev(vdev));\n            });\n        }\n\n        if(cx instanceof Characteristic.PositionState){\n            //TODO: Currently only Door sensors, so always return STOPPED.\n            cx.zway_getValueFromVDev = function(vdev){\n                return Characteristic.PositionState.STOPPED;\n            };\n            cx.value = cx.zway_getValueFromVDev(vdev);\n            cx.on('get', function(callback, context){\n                debug(\"Getting value for \" + vdev.metrics.title + \", characteristic \\\"\" + cx.displayName + \"\\\"...\");\n                callback(false, cx.zway_getValueFromVDev(vdev));\n            });\n        }\n     \n    }\n    ,\n    configureService: function(service, vdev){\n        var success = true;\n        for(var i = 0; i < service.characteristics.length; i++){\n            var cx = service.characteristics[i];\n            var vdev = this.getVDevForCharacteristic(cx, vdev);\n            if(!vdev){\n                success = false;\n                debug(\"ERROR! Failed to configure required characteristic \\\"\" + service.characteristics[i].displayName + \"\\\"!\");\n            }\n            cx = this.configureCharacteristic(cx, vdev, service);\n        }\n        for(var i = 0; i < service.optionalCharacteristics.length; i++){\n            var cx = service.optionalCharacteristics[i];\n            var vdev = this.getVDevForCharacteristic(cx, vdev);\n            if(!vdev) continue;\n\n            //NOTE: Questionable logic, but if the vdev has already been used for the same \n            // characteristic type elsewhere, lets not duplicate it just for the sake of an \n            // optional characteristic. This eliminates the problem with RGB+W+W bulbs \n            // having the HSV controls shown again, but might have unintended consequences...\n            var othercx, othercxs = this.platform.cxVDevMap[vdev.id];\n            if(othercxs) for(var j = 0; j < othercxs.length; j++) if(othercxs[j].UUID === cx.UUID) othercx = othercxs[j];\n            if(othercx)\n                continue;\n\n            cx = this.configureCharacteristic(cx, vdev, service);\n            try {\n                if(cx) service.addCharacteristic(cx);\n            }\n            catch (ex) {\n                debug('Adding Characteristic \"' + cx.displayName + '\" failed with message \"' + ex.message + '\". This may be expected.');\n            }\n        }\n        return success;\n    }\n    ,\n    getServices: function() {\n        var that = this;\n        \n        var vdevPrimary = this.devDesc.devices[this.devDesc.primary];\n        var accId = this.platform.getTagValue(vdevPrimary, \"Accessory.Id\");\n        if(!accId){\n            accId = \"VDev-\" + vdevPrimary.h; //FIXME: Is this valid?\n        }\n        \n        var informationService = new Service.AccessoryInformation();\n    \n        informationService\n                .setCharacteristic(Characteristic.Name, this.name)\n                .setCharacteristic(Characteristic.Manufacturer, \"Z-Wave.me\")\n                .setCharacteristic(Characteristic.Model, \"Virtual Device (VDev version 1)\")\n                .setCharacteristic(Characteristic.SerialNumber, accId);\n\n        var services = [informationService];\n    \n        services = services.concat(this.getVDevServices(vdevPrimary));\n        \n        // Any extra switchMultilevels? Could be a RGBW+W bulb, add them as additional services...\n        if(this.devDesc.extras[\"switchMultilevel\"]) for(var i = 0; i < this.devDesc.extras[\"switchMultilevel\"].length; i++){\n            var xvdev = this.devDesc.devices[this.devDesc.extras[\"switchMultilevel\"][i]];\n            var xservice = this.getVDevServices(xvdev);\n            services = services.concat(xservice);\n        }\n\n        if(this.platform.splitServices){\n            if(this.devDesc.types[\"battery.Battery\"]){\n                services = services.concat(this.getVDevServices(this.devDesc.devices[this.devDesc.types[\"battery.Battery\"]]));\n            }\n\n            // Odds and ends...if there are sensors that haven't been used, add services for them...\n\n            var tempSensor = this.devDesc.types[\"sensorMultilevel.Temperature\"] !== undefined ? this.devDesc.devices[this.devDesc.types[\"sensorMultilevel.Temperature\"]] : false;\n            if(tempSensor && !this.platform.cxVDevMap[tempSensor.id]){\n                services = services.concat(this.getVDevServices(tempSensor));\n            }\n\n            var lightSensor = this.devDesc.types[\"sensorMultilevel.Luminiscence\"] !== undefined ? this.devDesc.devices[this.devDesc.types[\"sensorMultilevel.Luminiscence\"]] : false;\n            if(lightSensor && !this.platform.cxVDevMap[lightSensor.id]){\n                services = services.concat(this.getVDevServices(lightSensor));\n            }\n        } else {\n            // Everything outside the primary service gets added as optional characteristics...\n            var service = services[1];\n            var existingCxUUIDs = {};\n            for(var i = 0; i < service.characteristics.length; i++) existingCxUUIDs[service.characteristics[i].UUID] = true;\n            \n            for(var i = 0; i < this.devDesc.devices.length; i++){\n                var vdev = this.devDesc.devices[i];\n                if(this.platform.cxVDevMap[vdev.id]) continue; // Don't double-use anything\n                var extraCxClasses = this.extraCharacteristicsMap[ZWayServerPlatform.getVDevTypeKey(vdev)];\n                var extraCxs = [];\n                if(!extraCxClasses || extraCxClasses.length === 0) continue;\n                for(var j = 0; j < extraCxClasses.length; j++){\n                    var cx = new extraCxClasses[j]();\n                    if(existingCxUUIDs[cx.UUID]) continue; // Don't have two of the same Characteristic type in one service!\n                    var vdev2 = this.getVDevForCharacteristic(cx, vdev); // Just in case...will probably return vdev.\n                    if(!vdev2){\n                        // Uh oh... one of the extraCxClasses can't be configured! Abort all extras for this vdev!\n                        extraCxs = []; // to wipe out any already setup cxs.\n                        break;\n                    }\n                    this.configureCharacteristic(cx, vdev2, service);\n                    extraCxs.push(cx);\n                }\n                for(var j = 0; j < extraCxs.length; j++)\n                    service.addCharacteristic(extraCxs[j]);\n            }\n        }\n        \n        debug(\"Loaded services for \" + this.name);\n        return services;\n    }\n};\n\nmodule.exports.accessory = ZWayServerAccessory;\nmodule.exports.platform = ZWayServerPlatform;\n"}